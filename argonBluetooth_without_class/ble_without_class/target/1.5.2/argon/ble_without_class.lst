
c:/Users/Keld/Documents/PlatformIO/Projects/argonBluetooth_without_class/ble_without_class/target/1.5.2/argon/ble_without_class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002cb4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6cd0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e428  000d6cd4  0001e428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000360  2003e490  2003e490  0002e490  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6d3c  000d6d3c  00026d3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6d64  000d6d64  00026d64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b154f  00000000  00000000  00026d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000cc0b  00000000  00000000  000d82b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a927  00000000  00000000  000e4ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002330  00000000  00000000  000ff7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004290  00000000  00000000  00101b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002eb8e  00000000  00000000  00105da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001dac4  00000000  00000000  00134937  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ff534  00000000  00000000  001523fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c670  00000000  00000000  00251930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fb00 	bl	d6632 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fb20 	bl	d667e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e428 	.word	0x2003e428
   d4048:	000d6cd4 	.word	0x000d6cd4
   d404c:	2003e490 	.word	0x2003e490
   d4050:	2003e490 	.word	0x2003e490
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fe1f 	bl	d5c9c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6cc8 	.word	0x000d6cc8
   d4080:	000d6c90 	.word	0x000d6c90

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b88a 	b.w	d419c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8e3 	bl	d4254 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bdc5 	b.w	d5c20 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbad 	b.w	d47f4 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bbb3 	b.w	d4804 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bbb1 	b.w	d4804 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40b2:	b510      	push	{r4, lr}
   d40b4:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40b6:	6800      	ldr	r0, [r0, #0]
   d40b8:	b108      	cbz	r0, d40be <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40ba:	f000 fba3 	bl	d4804 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40be:	4620      	mov	r0, r4
   d40c0:	bd10      	pop	{r4, pc}

000d40c2 <_ZNK5spark6Logger5traceEPKcz>:
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d40c2:	b40e      	push	{r1, r2, r3}
   d40c4:	b500      	push	{lr}
   d40c6:	b08c      	sub	sp, #48	; 0x30
   d40c8:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d40ca:	2320      	movs	r3, #32
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d40cc:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d40d0:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40d2:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d40d6:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40d8:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d40da:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40dc:	aa04      	add	r2, sp, #16
   d40de:	2001      	movs	r0, #1
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d40e0:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40e2:	f000 fb0b 	bl	d46fc <log_message_v>
inline void spark::Logger::trace(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}
   d40e6:	b00c      	add	sp, #48	; 0x30
   d40e8:	f85d eb04 	ldr.w	lr, [sp], #4
   d40ec:	b003      	add	sp, #12
   d40ee:	4770      	bx	lr

000d40f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);


uint8_t * image;

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d40f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d40f4:	b091      	sub	sp, #68	; 0x44
   d40f6:	4604      	mov	r4, r0
   d40f8:	460e      	mov	r6, r1
     Log.trace("Received data from: %02X:%02X:%02X:%02X:%02X:%02X:", peer.address()[0], peer.address()[1], peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);
   d40fa:	a804      	add	r0, sp, #16
   d40fc:	4611      	mov	r1, r2
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);


uint8_t * image;

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d40fe:	4615      	mov	r5, r2
     Log.trace("Received data from: %02X:%02X:%02X:%02X:%02X:%02X:", peer.address()[0], peer.address()[1], peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);
   d4100:	f000 ff20 	bl	d4f44 <_ZNK8particle13BlePeerDevice7addressEv>
   d4104:	2100      	movs	r1, #0
   d4106:	a804      	add	r0, sp, #16
   d4108:	f000 fcc6 	bl	d4a98 <_ZNK8particle10BleAddressixEh>
   d410c:	4629      	mov	r1, r5
   d410e:	4607      	mov	r7, r0
   d4110:	a806      	add	r0, sp, #24
   d4112:	f000 ff17 	bl	d4f44 <_ZNK8particle13BlePeerDevice7addressEv>
   d4116:	2101      	movs	r1, #1
   d4118:	a806      	add	r0, sp, #24
   d411a:	f000 fcbd 	bl	d4a98 <_ZNK8particle10BleAddressixEh>
   d411e:	4629      	mov	r1, r5
   d4120:	4680      	mov	r8, r0
   d4122:	a808      	add	r0, sp, #32
   d4124:	f000 ff0e 	bl	d4f44 <_ZNK8particle13BlePeerDevice7addressEv>
   d4128:	2102      	movs	r1, #2
   d412a:	a808      	add	r0, sp, #32
   d412c:	f000 fcb4 	bl	d4a98 <_ZNK8particle10BleAddressixEh>
   d4130:	4629      	mov	r1, r5
   d4132:	4681      	mov	r9, r0
   d4134:	a80a      	add	r0, sp, #40	; 0x28
   d4136:	f000 ff05 	bl	d4f44 <_ZNK8particle13BlePeerDevice7addressEv>
   d413a:	2103      	movs	r1, #3
   d413c:	a80a      	add	r0, sp, #40	; 0x28
   d413e:	f000 fcab 	bl	d4a98 <_ZNK8particle10BleAddressixEh>
   d4142:	4629      	mov	r1, r5
   d4144:	4682      	mov	sl, r0
   d4146:	a80c      	add	r0, sp, #48	; 0x30
   d4148:	f000 fefc 	bl	d4f44 <_ZNK8particle13BlePeerDevice7addressEv>
   d414c:	2104      	movs	r1, #4
   d414e:	a80c      	add	r0, sp, #48	; 0x30
   d4150:	f000 fca2 	bl	d4a98 <_ZNK8particle10BleAddressixEh>
   d4154:	4629      	mov	r1, r5
   d4156:	4683      	mov	fp, r0
   d4158:	a80e      	add	r0, sp, #56	; 0x38
   d415a:	f000 fef3 	bl	d4f44 <_ZNK8particle13BlePeerDevice7addressEv>
   d415e:	2105      	movs	r1, #5
   d4160:	a80e      	add	r0, sp, #56	; 0x38
   d4162:	f000 fc99 	bl	d4a98 <_ZNK8particle10BleAddressixEh>
   d4166:	e88d 0e00 	stmia.w	sp, {r9, sl, fp}
   d416a:	9003      	str	r0, [sp, #12]
   d416c:	4643      	mov	r3, r8
   d416e:	463a      	mov	r2, r7
   d4170:	4908      	ldr	r1, [pc, #32]	; (d4194 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   d4172:	4809      	ldr	r0, [pc, #36]	; (d4198 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa8>)
   d4174:	f7ff ffa5 	bl	d40c2 <_ZNK5spark6Logger5traceEPKcz>
   d4178:	4426      	add	r6, r4

    for (size_t ii = 0; ii < len; ii++) {
   d417a:	42b4      	cmp	r4, r6
   d417c:	d007      	beq.n	d418e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9e>
      //  image[ii] == data[ii];
        Serial.write(data[ii]);
   d417e:	f001 fe8d 	bl	d5e9c <_Z16_fetch_usbserialv>
   d4182:	6803      	ldr	r3, [r0, #0]
   d4184:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4188:	689b      	ldr	r3, [r3, #8]
   d418a:	4798      	blx	r3
uint8_t * image;

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
     Log.trace("Received data from: %02X:%02X:%02X:%02X:%02X:%02X:", peer.address()[0], peer.address()[1], peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);

    for (size_t ii = 0; ii < len; ii++) {
   d418c:	e7f5      	b.n	d417a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8a>
      //  image[ii] == data[ii];
        Serial.write(data[ii]);
    }
}
   d418e:	b011      	add	sp, #68	; 0x44
   d4190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4194:	000d671c 	.word	0x000d671c
   d4198:	2003e510 	.word	0x2003e510

000d419c <setup>:

void setup() {
   d419c:	b510      	push	{r4, lr}
   d419e:	b096      	sub	sp, #88	; 0x58
    Serial.begin();
   d41a0:	f001 fe7c 	bl	d5e9c <_Z16_fetch_usbserialv>
   d41a4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41a8:	f001 fe6c 	bl	d5e84 <_ZN9USBSerial5beginEl>
    BLE.selectAntenna(BleAntennaType::EXTERNAL);
   d41ac:	f000 ff1a 	bl	d4fe4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41b0:	2102      	movs	r1, #2
   d41b2:	f000 ff7c 	bl	d50ae <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
    BLE.setTxPower(8);
   d41b6:	f000 ff15 	bl	d4fe4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41ba:	2108      	movs	r1, #8
   d41bc:	f000 ff67 	bl	d508e <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    BLE.on();
   d41c0:	f000 ff10 	bl	d4fe4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41c4:	f000 ff54 	bl	d5070 <_ZNK8particle14BleLocalDevice2onEv>

    BLE.addCharacteristic(txCharacteristic);
   d41c8:	f000 ff0c 	bl	d4fe4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41cc:	4a1e      	ldr	r2, [pc, #120]	; (d4248 <setup+0xac>)
   d41ce:	4601      	mov	r1, r0
   d41d0:	a80d      	add	r0, sp, #52	; 0x34
   d41d2:	f001 fb73 	bl	d58bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d41d6:	a80d      	add	r0, sp, #52	; 0x34
   d41d8:	f000 ffe3 	bl	d51a2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   d41dc:	f000 ff02 	bl	d4fe4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41e0:	4a1a      	ldr	r2, [pc, #104]	; (d424c <setup+0xb0>)
   d41e2:	4601      	mov	r1, r0
   d41e4:	a80d      	add	r0, sp, #52	; 0x34
   d41e6:	f001 fb69 	bl	d58bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d41ea:	a80d      	add	r0, sp, #52	; 0x34
   d41ec:	f000 ffd9 	bl	d51a2 <_ZN8particle17BleCharacteristicD1Ev>

    BleAdvertisingData data;
   d41f0:	a80d      	add	r0, sp, #52	; 0x34
   d41f2:	f000 fddd 	bl	d4db0 <_ZN8particle18BleAdvertisingDataC1Ev>
    data.appendServiceUUID(serviceUuid);
   d41f6:	4916      	ldr	r1, [pc, #88]	; (d4250 <setup+0xb4>)
   d41f8:	a803      	add	r0, sp, #12
   d41fa:	f000 fc71 	bl	d4ae0 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d41fe:	a903      	add	r1, sp, #12
   d4200:	a808      	add	r0, sp, #32
   d4202:	f000 fc6d 	bl	d4ae0 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4206:	a808      	add	r0, sp, #32
   d4208:	f000 fcb4 	bl	d4b74 <_ZNK8particle7BleUuid4typeEv>
   d420c:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d420e:	a808      	add	r0, sp, #32
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4210:	b944      	cbnz	r4, d4224 <setup+0x88>
            uint16_t uuid16 = tempUUID.shorted();
   d4212:	f000 fccd 	bl	d4bb0 <_ZNK8particle7BleUuid7shortedEv>
   d4216:	aa16      	add	r2, sp, #88	; 0x58
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4218:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d421a:	f822 0d4e 	strh.w	r0, [r2, #-78]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d421e:	2103      	movs	r1, #3
   d4220:	9400      	str	r4, [sp, #0]
   d4222:	e006      	b.n	d4232 <setup+0x96>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4224:	f000 fcc9 	bl	d4bba <_ZNK8particle7BleUuid8rawBytesEv>
   d4228:	2300      	movs	r3, #0
   d422a:	9300      	str	r3, [sp, #0]
   d422c:	4602      	mov	r2, r0
   d422e:	2310      	movs	r3, #16
   d4230:	2107      	movs	r1, #7
   d4232:	a80d      	add	r0, sp, #52	; 0x34
   d4234:	f000 fd75 	bl	d4d22 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&data);
   d4238:	f000 fed4 	bl	d4fe4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d423c:	2200      	movs	r2, #0
   d423e:	a90d      	add	r1, sp, #52	; 0x34
   d4240:	f000 ff60 	bl	d5104 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   d4244:	b016      	add	sp, #88	; 0x58
   d4246:	bd10      	pop	{r4, pc}
   d4248:	2003e4c8 	.word	0x2003e4c8
   d424c:	2003e4d0 	.word	0x2003e4d0
   d4250:	2003e494 	.word	0x2003e494

000d4254 <loop>:

void loop() {
   d4254:	b530      	push	{r4, r5, lr}
   d4256:	b087      	sub	sp, #28
    if (BLE.connected()) {
   d4258:	f000 fec4 	bl	d4fe4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d425c:	f000 ff6f 	bl	d513e <_ZNK8particle14BleLocalDevice9connectedEv>
   d4260:	b338      	cbz	r0, d42b2 <loop+0x5e>
        Serial.write("hej");
   d4262:	f001 fe1b 	bl	d5e9c <_Z16_fetch_usbserialv>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4266:	6803      	ldr	r3, [r0, #0]
   d4268:	4913      	ldr	r1, [pc, #76]	; (d42b8 <loop+0x64>)
   d426a:	68db      	ldr	r3, [r3, #12]
   d426c:	2203      	movs	r2, #3
   d426e:	4798      	blx	r3
   d4270:	2400      	movs	r4, #0
        uint8_t txBuf[UART_TX_BUF_SIZE];
        size_t txLen = 0;

        while(Serial.available() && txLen < UART_TX_BUF_SIZE) {
   d4272:	f001 fe13 	bl	d5e9c <_Z16_fetch_usbserialv>
   d4276:	6803      	ldr	r3, [r0, #0]
   d4278:	691b      	ldr	r3, [r3, #16]
   d427a:	4798      	blx	r3
   d427c:	b1b8      	cbz	r0, d42ae <loop+0x5a>
   d427e:	2c14      	cmp	r4, #20
   d4280:	d106      	bne.n	d4290 <loop+0x3c>
            txBuf[txLen++] = Serial.read();
            Serial.write(txBuf[txLen - 1]);
        }
        if (txLen > 0) {
            txCharacteristic.setValue(txBuf, txLen);
   d4282:	2300      	movs	r3, #0
   d4284:	4622      	mov	r2, r4
   d4286:	a901      	add	r1, sp, #4
   d4288:	480c      	ldr	r0, [pc, #48]	; (d42bc <loop+0x68>)
   d428a:	f000 fdf9 	bl	d4e80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        }
    }
   d428e:	e010      	b.n	d42b2 <loop+0x5e>
        Serial.write("hej");
        uint8_t txBuf[UART_TX_BUF_SIZE];
        size_t txLen = 0;

        while(Serial.available() && txLen < UART_TX_BUF_SIZE) {
            txBuf[txLen++] = Serial.read();
   d4290:	f001 fe04 	bl	d5e9c <_Z16_fetch_usbserialv>
   d4294:	6803      	ldr	r3, [r0, #0]
   d4296:	695b      	ldr	r3, [r3, #20]
   d4298:	4798      	blx	r3
   d429a:	ad01      	add	r5, sp, #4
   d429c:	5528      	strb	r0, [r5, r4]
            Serial.write(txBuf[txLen - 1]);
   d429e:	f001 fdfd 	bl	d5e9c <_Z16_fetch_usbserialv>
   d42a2:	6803      	ldr	r3, [r0, #0]
   d42a4:	5d29      	ldrb	r1, [r5, r4]
   d42a6:	689b      	ldr	r3, [r3, #8]
   d42a8:	4798      	blx	r3
   d42aa:	3401      	adds	r4, #1
    if (BLE.connected()) {
        Serial.write("hej");
        uint8_t txBuf[UART_TX_BUF_SIZE];
        size_t txLen = 0;

        while(Serial.available() && txLen < UART_TX_BUF_SIZE) {
   d42ac:	e7e1      	b.n	d4272 <loop+0x1e>
            txBuf[txLen++] = Serial.read();
            Serial.write(txBuf[txLen - 1]);
        }
        if (txLen > 0) {
   d42ae:	2c00      	cmp	r4, #0
   d42b0:	d1e7      	bne.n	d4282 <loop+0x2e>
            txCharacteristic.setValue(txBuf, txLen);
        }
    }
   d42b2:	b007      	add	sp, #28
   d42b4:	bd30      	pop	{r4, r5, pc}
   d42b6:	bf00      	nop
   d42b8:	000d674f 	.word	0x000d674f
   d42bc:	2003e4c8 	.word	0x2003e4c8

000d42c0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d42c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d42c2:	460e      	mov	r6, r1
   d42c4:	b091      	sub	sp, #68	; 0x44

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d42c6:	2100      	movs	r1, #0
   d42c8:	4604      	mov	r4, r0
   d42ca:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d42cc:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d42ce:	ad0b      	add	r5, sp, #44	; 0x2c
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d42d0:	4619      	mov	r1, r3
   d42d2:	a806      	add	r0, sp, #24
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d42d4:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d42d6:	f000 fc03 	bl	d4ae0 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d42da:	9916      	ldr	r1, [sp, #88]	; 0x58
   d42dc:	4628      	mov	r0, r5
   d42de:	f000 fbff 	bl	d4ae0 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d42e2:	aa10      	add	r2, sp, #64	; 0x40
   d42e4:	783b      	ldrb	r3, [r7, #0]
   d42e6:	f802 3d2c 	strb.w	r3, [r2, #-44]!
        construct(desc, properties, cUuid, sUuid, callback, context);
   d42ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d42ec:	9302      	str	r3, [sp, #8]
   d42ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d42f0:	9301      	str	r3, [sp, #4]
   d42f2:	4620      	mov	r0, r4
   d42f4:	9500      	str	r5, [sp, #0]
   d42f6:	ab06      	add	r3, sp, #24
   d42f8:	4631      	mov	r1, r6
   d42fa:	f001 fa2b 	bl	d5754 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d42fe:	4620      	mov	r0, r4
   d4300:	b011      	add	sp, #68	; 0x44
   d4302:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4304 <_GLOBAL__sub_I_SystemMode>:
   d4304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4308:	4d30      	ldr	r5, [pc, #192]	; (d43cc <_GLOBAL__sub_I_SystemMode+0xc8>)
#include "Particle.h"

// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
SYSTEM_MODE(MANUAL);
   d430a:	4e31      	ldr	r6, [pc, #196]	; (d43d0 <_GLOBAL__sub_I_SystemMode+0xcc>)

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context);

// These UUIDs were defined by Nordic Semiconductor and are now the defacto standard for
// UART-like services over BLE. Many apps support the UUIDs now, like the Adafruit Bluefruit app.
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d430c:	4f31      	ldr	r7, [pc, #196]	; (d43d4 <_GLOBAL__sub_I_SystemMode+0xd0>)
const BleUuid rxUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d430e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d43fc <_GLOBAL__sub_I_SystemMode+0xf8>
const BleUuid txUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d4312:	f8df a0ec 	ldr.w	sl, [pc, #236]	; d4400 <_GLOBAL__sub_I_SystemMode+0xfc>
   d4316:	f8df 80ec 	ldr.w	r8, [pc, #236]	; d4404 <_GLOBAL__sub_I_SystemMode+0x100>
        }
        if (txLen > 0) {
            txCharacteristic.setValue(txBuf, txLen);
        }
    }
   d431a:	b090      	sub	sp, #64	; 0x40

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d431c:	f000 f884 	bl	d4428 <HAL_Pin_Map>
   d4320:	2400      	movs	r4, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4322:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4326:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4328:	602c      	str	r4, [r5, #0]
   d432a:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d432c:	71ac      	strb	r4, [r5, #6]
   d432e:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4330:	2003      	movs	r0, #3
   d4332:	f000 f9eb 	bl	d470c <set_system_mode>
#include "Particle.h"

// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
SYSTEM_MODE(MANUAL);
   d4336:	4632      	mov	r2, r6
   d4338:	4927      	ldr	r1, [pc, #156]	; (d43d8 <_GLOBAL__sub_I_SystemMode+0xd4>)
   d433a:	4628      	mov	r0, r5
   d433c:	f002 f80c 	bl	d6358 <__aeabi_atexit>

// These UUIDs were defined by Nordic Semiconductor and are now the defacto standard for
// UART-like services over BLE. Many apps support the UUIDs now, like the Adafruit Bluefruit app.
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
const BleUuid rxUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
const BleUuid txUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d4340:	4d26      	ldr	r5, [pc, #152]	; (d43dc <_GLOBAL__sub_I_SystemMode+0xd8>)

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context);

// These UUIDs were defined by Nordic Semiconductor and are now the defacto standard for
// UART-like services over BLE. Many apps support the UUIDs now, like the Adafruit Bluefruit app.
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4342:	4927      	ldr	r1, [pc, #156]	; (d43e0 <_GLOBAL__sub_I_SystemMode+0xdc>)
   d4344:	4638      	mov	r0, r7
   d4346:	f000 fcc9 	bl	d4cdc <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d434a:	4926      	ldr	r1, [pc, #152]	; (d43e4 <_GLOBAL__sub_I_SystemMode+0xe0>)
   d434c:	4648      	mov	r0, r9
   d434e:	f000 fcc5 	bl	d4cdc <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d4352:	4925      	ldr	r1, [pc, #148]	; (d43e8 <_GLOBAL__sub_I_SystemMode+0xe4>)
   d4354:	4628      	mov	r0, r5
   d4356:	f000 fcc1 	bl	d4cdc <_ZN8particle7BleUuidC1EPKc>
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d435a:	2310      	movs	r3, #16

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d435c:	4629      	mov	r1, r5
   d435e:	a806      	add	r0, sp, #24
   d4360:	ad0b      	add	r5, sp, #44	; 0x2c
   d4362:	f88d 3014 	strb.w	r3, [sp, #20]
   d4366:	f000 fbbb 	bl	d4ae0 <_ZN8particle7BleUuidC1ERKS0_>
   d436a:	4639      	mov	r1, r7
   d436c:	4628      	mov	r0, r5
   d436e:	f000 fbb7 	bl	d4ae0 <_ZN8particle7BleUuidC1ERKS0_>
   d4372:	ab06      	add	r3, sp, #24
   d4374:	aa05      	add	r2, sp, #20
   d4376:	9402      	str	r4, [sp, #8]
   d4378:	9401      	str	r4, [sp, #4]
   d437a:	9500      	str	r5, [sp, #0]
   d437c:	491b      	ldr	r1, [pc, #108]	; (d43ec <_GLOBAL__sub_I_SystemMode+0xe8>)
   d437e:	4650      	mov	r0, sl
   d4380:	f7ff ff9e 	bl	d42c0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4384:	4632      	mov	r2, r6
   d4386:	4641      	mov	r1, r8
   d4388:	4650      	mov	r0, sl
   d438a:	f001 ffe5 	bl	d6358 <__aeabi_atexit>
   d438e:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d4390:	4649      	mov	r1, r9
   d4392:	a806      	add	r0, sp, #24
   d4394:	f88d 3014 	strb.w	r3, [sp, #20]
   d4398:	f000 fba2 	bl	d4ae0 <_ZN8particle7BleUuidC1ERKS0_>
   d439c:	4639      	mov	r1, r7
   d439e:	4628      	mov	r0, r5
   d43a0:	4f13      	ldr	r7, [pc, #76]	; (d43f0 <_GLOBAL__sub_I_SystemMode+0xec>)
   d43a2:	f000 fb9d 	bl	d4ae0 <_ZN8particle7BleUuidC1ERKS0_>
   d43a6:	4b13      	ldr	r3, [pc, #76]	; (d43f4 <_GLOBAL__sub_I_SystemMode+0xf0>)
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	aa05      	add	r2, sp, #20
   d43ac:	ab06      	add	r3, sp, #24
   d43ae:	9402      	str	r4, [sp, #8]
   d43b0:	9500      	str	r5, [sp, #0]
   d43b2:	4911      	ldr	r1, [pc, #68]	; (d43f8 <_GLOBAL__sub_I_SystemMode+0xf4>)
   d43b4:	4638      	mov	r0, r7
   d43b6:	f7ff ff83 	bl	d42c0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d43ba:	4632      	mov	r2, r6
   d43bc:	4641      	mov	r1, r8
   d43be:	4638      	mov	r0, r7
   d43c0:	f001 ffca 	bl	d6358 <__aeabi_atexit>
        }
        if (txLen > 0) {
            txCharacteristic.setValue(txBuf, txLen);
        }
    }
   d43c4:	b010      	add	sp, #64	; 0x40
   d43c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d43ca:	bf00      	nop
   d43cc:	2003e4bc 	.word	0x2003e4bc
   d43d0:	2003e490 	.word	0x2003e490
   d43d4:	2003e494 	.word	0x2003e494
   d43d8:	000d40b3 	.word	0x000d40b3
   d43dc:	2003e4a8 	.word	0x2003e4a8
   d43e0:	000d6753 	.word	0x000d6753
   d43e4:	000d6778 	.word	0x000d6778
   d43e8:	000d679d 	.word	0x000d679d
   d43ec:	000d67c2 	.word	0x000d67c2
   d43f0:	2003e4d0 	.word	0x2003e4d0
   d43f4:	000d40f1 	.word	0x000d40f1
   d43f8:	000d67c5 	.word	0x000d67c5
   d43fc:	2003e4d8 	.word	0x2003e4d8
   d4400:	2003e4c8 	.word	0x2003e4c8
   d4404:	000d51a3 	.word	0x000d51a3

000d4408 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <netdb_freeaddrinfo+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	689b      	ldr	r3, [r3, #8]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	00030268 	.word	0x00030268

000d4418 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <netdb_getaddrinfo+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	68db      	ldr	r3, [r3, #12]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	00030268 	.word	0x00030268

000d4428 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <HAL_Pin_Map+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	681b      	ldr	r3, [r3, #0]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	0003022c 	.word	0x0003022c

000d4438 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <HAL_RNG_GetRandomNumber+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	685b      	ldr	r3, [r3, #4]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	00030218 	.word	0x00030218

000d4448 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <HAL_Delay_Microseconds+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	68db      	ldr	r3, [r3, #12]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	00030218 	.word	0x00030218

000d4458 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	695b      	ldr	r3, [r3, #20]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	00030218 	.word	0x00030218

000d4468 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <hal_ble_stack_init+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	689b      	ldr	r3, [r3, #8]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030278 	.word	0x00030278

000d4478 <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <hal_ble_select_antenna+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	691b      	ldr	r3, [r3, #16]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030278 	.word	0x00030278

000d4488 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <hal_ble_gap_set_tx_power+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030278 	.word	0x00030278

000d4498 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <hal_ble_gap_set_advertising_data+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030278 	.word	0x00030278

000d44a8 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <hal_ble_gap_set_scan_response_data+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030278 	.word	0x00030278

000d44b8 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <hal_ble_gap_start_advertising+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030278 	.word	0x00030278

000d44c8 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b03      	ldr	r3, [pc, #12]	; (d44d8 <hal_ble_gap_disconnect+0x10>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d44d2:	9301      	str	r3, [sp, #4]
   d44d4:	bd08      	pop	{r3, pc}
   d44d6:	0000      	.short	0x0000
   d44d8:	00030278 	.word	0x00030278

000d44dc <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b03      	ldr	r3, [pc, #12]	; (d44ec <hal_ble_gatt_server_add_service+0x10>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d44e6:	9301      	str	r3, [sp, #4]
   d44e8:	bd08      	pop	{r3, pc}
   d44ea:	0000      	.short	0x0000
   d44ec:	00030278 	.word	0x00030278

000d44f0 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b03      	ldr	r3, [pc, #12]	; (d4500 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d44fa:	9301      	str	r3, [sp, #4]
   d44fc:	bd08      	pop	{r3, pc}
   d44fe:	0000      	.short	0x0000
   d4500:	00030278 	.word	0x00030278

000d4504 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b03      	ldr	r3, [pc, #12]	; (d4514 <hal_ble_gatt_client_write_with_response+0x10>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d450e:	9301      	str	r3, [sp, #4]
   d4510:	bd08      	pop	{r3, pc}
   d4512:	0000      	.short	0x0000
   d4514:	00030278 	.word	0x00030278

000d4518 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b03      	ldr	r3, [pc, #12]	; (d4528 <hal_ble_gatt_client_write_without_response+0x10>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d4522:	9301      	str	r3, [sp, #4]
   d4524:	bd08      	pop	{r3, pc}
   d4526:	0000      	.short	0x0000
   d4528:	00030278 	.word	0x00030278

000d452c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b03      	ldr	r3, [pc, #12]	; (d453c <hal_ble_gatt_server_add_characteristic+0x10>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d4536:	9301      	str	r3, [sp, #4]
   d4538:	bd08      	pop	{r3, pc}
   d453a:	0000      	.short	0x0000
   d453c:	00030278 	.word	0x00030278

000d4540 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b03      	ldr	r3, [pc, #12]	; (d4550 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d454a:	9301      	str	r3, [sp, #4]
   d454c:	bd08      	pop	{r3, pc}
   d454e:	0000      	.short	0x0000
   d4550:	00030278 	.word	0x00030278

000d4554 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b03      	ldr	r3, [pc, #12]	; (d4564 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d455e:	9301      	str	r3, [sp, #4]
   d4560:	bd08      	pop	{r3, pc}
   d4562:	0000      	.short	0x0000
   d4564:	00030278 	.word	0x00030278

000d4568 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b03      	ldr	r3, [pc, #12]	; (d4578 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d4572:	9301      	str	r3, [sp, #4]
   d4574:	bd08      	pop	{r3, pc}
   d4576:	0000      	.short	0x0000
   d4578:	00030278 	.word	0x00030278

000d457c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <os_thread_is_current+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	689b      	ldr	r3, [r3, #8]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030248 	.word	0x00030248

000d458c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <os_thread_join+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	691b      	ldr	r3, [r3, #16]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030248 	.word	0x00030248

000d459c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <os_thread_cleanup+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	695b      	ldr	r3, [r3, #20]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	00030248 	.word	0x00030248

000d45ac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <os_mutex_recursive_create+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	00030248 	.word	0x00030248

000d45bc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <os_mutex_recursive_destroy+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	00030248 	.word	0x00030248

000d45cc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <os_mutex_recursive_lock+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	00030248 	.word	0x00030248

000d45dc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <os_mutex_recursive_unlock+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	00030248 	.word	0x00030248

000d45ec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <inet_inet_ntop+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	695b      	ldr	r3, [r3, #20]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	00030264 	.word	0x00030264

000d45fc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <HAL_USART_Init+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	681b      	ldr	r3, [r3, #0]
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	0003023c 	.word	0x0003023c

000d460c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <HAL_USART_Write_Data+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	68db      	ldr	r3, [r3, #12]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	0003023c 	.word	0x0003023c

000d461c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <HAL_USART_Available_Data+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	691b      	ldr	r3, [r3, #16]
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	0003023c 	.word	0x0003023c

000d462c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <HAL_USART_Read_Data+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	695b      	ldr	r3, [r3, #20]
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	0003023c 	.word	0x0003023c

000d463c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <HAL_USART_Peek_Data+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	699b      	ldr	r3, [r3, #24]
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	0003023c 	.word	0x0003023c

000d464c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <HAL_USART_Flush_Data+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	69db      	ldr	r3, [r3, #28]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	0003023c 	.word	0x0003023c

000d465c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <HAL_USART_Available_Data_For_Write+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	0003023c 	.word	0x0003023c

000d466c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <HAL_USB_USART_Init+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	681b      	ldr	r3, [r3, #0]
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	0003024c 	.word	0x0003024c

000d467c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <HAL_USB_USART_Begin+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	685b      	ldr	r3, [r3, #4]
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	0003024c 	.word	0x0003024c

000d468c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <HAL_USB_USART_Available_Data+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	691b      	ldr	r3, [r3, #16]
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	0003024c 	.word	0x0003024c

000d469c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	695b      	ldr	r3, [r3, #20]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	0003024c 	.word	0x0003024c

000d46ac <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <HAL_USB_USART_Receive_Data+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	699b      	ldr	r3, [r3, #24]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	0003024c 	.word	0x0003024c

000d46bc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <HAL_USB_USART_Send_Data+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	69db      	ldr	r3, [r3, #28]
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	0003024c 	.word	0x0003024c

000d46cc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <HAL_USB_USART_Flush_Data+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	6a1b      	ldr	r3, [r3, #32]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	0003024c 	.word	0x0003024c

000d46dc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <panic_+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	00030260 	.word	0x00030260

000d46ec <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <log_message+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	00030260 	.word	0x00030260

000d46fc <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <log_message_v+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	00030260 	.word	0x00030260

000d470c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <set_system_mode+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	685b      	ldr	r3, [r3, #4]
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	00030220 	.word	0x00030220

000d471c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b03      	ldr	r3, [pc, #12]	; (d472c <system_ctrl_set_app_request_handler+0x10>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4726:	9301      	str	r3, [sp, #4]
   d4728:	bd08      	pop	{r3, pc}
   d472a:	0000      	.short	0x0000
   d472c:	00030220 	.word	0x00030220

000d4730 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b03      	ldr	r3, [pc, #12]	; (d4740 <system_ctrl_set_result+0x10>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d473a:	9301      	str	r3, [sp, #4]
   d473c:	bd08      	pop	{r3, pc}
   d473e:	0000      	.short	0x0000
   d4740:	00030220 	.word	0x00030220

000d4744 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <network_connect+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	685b      	ldr	r3, [r3, #4]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030240 	.word	0x00030240

000d4754 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <network_connecting+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	689b      	ldr	r3, [r3, #8]
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030240 	.word	0x00030240

000d4764 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <network_disconnect+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	68db      	ldr	r3, [r3, #12]
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030240 	.word	0x00030240

000d4774 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <network_ready+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	691b      	ldr	r3, [r3, #16]
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030240 	.word	0x00030240

000d4784 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <network_on+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	695b      	ldr	r3, [r3, #20]
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	00030240 	.word	0x00030240

000d4794 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <network_off+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	699b      	ldr	r3, [r3, #24]
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	00030240 	.word	0x00030240

000d47a4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <network_listen+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	69db      	ldr	r3, [r3, #28]
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	00030240 	.word	0x00030240

000d47b4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <network_listening+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	6a1b      	ldr	r3, [r3, #32]
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	00030240 	.word	0x00030240

000d47c4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <network_set_listen_timeout+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	00030240 	.word	0x00030240

000d47d4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <network_get_listen_timeout+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	00030240 	.word	0x00030240

000d47e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	00030244 	.word	0x00030244

000d47f4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <malloc+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	681b      	ldr	r3, [r3, #0]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	0003021c 	.word	0x0003021c

000d4804 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <free+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	685b      	ldr	r3, [r3, #4]
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	0003021c 	.word	0x0003021c

000d4814 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <realloc+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	689b      	ldr	r3, [r3, #8]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	0003021c 	.word	0x0003021c

000d4824 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4824:	2200      	movs	r2, #0
   d4826:	4611      	mov	r1, r2
   d4828:	6840      	ldr	r0, [r0, #4]
   d482a:	f7ff bfc3 	b.w	d47b4 <network_listening>

000d482e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d482e:	2200      	movs	r2, #0
   d4830:	4611      	mov	r1, r2
   d4832:	6840      	ldr	r0, [r0, #4]
   d4834:	f7ff bfce 	b.w	d47d4 <network_get_listen_timeout>

000d4838 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4838:	2200      	movs	r2, #0
   d483a:	6840      	ldr	r0, [r0, #4]
   d483c:	f7ff bfc2 	b.w	d47c4 <network_set_listen_timeout>

000d4840 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4840:	2200      	movs	r2, #0
   d4842:	f081 0101 	eor.w	r1, r1, #1
   d4846:	6840      	ldr	r0, [r0, #4]
   d4848:	f7ff bfac 	b.w	d47a4 <network_listen>

000d484c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d484c:	2300      	movs	r3, #0
   d484e:	461a      	mov	r2, r3
   d4850:	4619      	mov	r1, r3
   d4852:	6840      	ldr	r0, [r0, #4]
   d4854:	f7ff bf9e 	b.w	d4794 <network_off>

000d4858 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4858:	2300      	movs	r3, #0
   d485a:	461a      	mov	r2, r3
   d485c:	4619      	mov	r1, r3
   d485e:	6840      	ldr	r0, [r0, #4]
   d4860:	f7ff bf90 	b.w	d4784 <network_on>

000d4864 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4864:	2200      	movs	r2, #0
   d4866:	4611      	mov	r1, r2
   d4868:	6840      	ldr	r0, [r0, #4]
   d486a:	f7ff bf83 	b.w	d4774 <network_ready>

000d486e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d486e:	2200      	movs	r2, #0
   d4870:	4611      	mov	r1, r2
   d4872:	6840      	ldr	r0, [r0, #4]
   d4874:	f7ff bf6e 	b.w	d4754 <network_connecting>

000d4878 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4878:	2200      	movs	r2, #0
   d487a:	2102      	movs	r1, #2
   d487c:	6840      	ldr	r0, [r0, #4]
   d487e:	f7ff bf71 	b.w	d4764 <network_disconnect>

000d4882 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4882:	2300      	movs	r3, #0
   d4884:	461a      	mov	r2, r3
   d4886:	6840      	ldr	r0, [r0, #4]
   d4888:	f7ff bf5c 	b.w	d4744 <network_connect>

000d488c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d488c:	4b02      	ldr	r3, [pc, #8]	; (d4898 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d488e:	2203      	movs	r2, #3
   d4890:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4892:	4a02      	ldr	r2, [pc, #8]	; (d489c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4894:	601a      	str	r2, [r3, #0]
   d4896:	4770      	bx	lr
   d4898:	2003e4ec 	.word	0x2003e4ec
   d489c:	000d67d0 	.word	0x000d67d0

000d48a0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d48a0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d48a2:	4c09      	ldr	r4, [pc, #36]	; (d48c8 <_GLOBAL__sub_I_System+0x28>)
   d48a4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d48a6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d48aa:	6020      	str	r0, [r4, #0]
   d48ac:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d48ae:	71a0      	strb	r0, [r4, #6]
   d48b0:	8120      	strh	r0, [r4, #8]
   d48b2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d48b4:	f7ff ff2a 	bl	d470c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d48b8:	4620      	mov	r0, r4
   d48ba:	4a04      	ldr	r2, [pc, #16]	; (d48cc <_GLOBAL__sub_I_System+0x2c>)
   d48bc:	4904      	ldr	r1, [pc, #16]	; (d48d0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d48be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d48c2:	f001 bd49 	b.w	d6358 <__aeabi_atexit>
   d48c6:	bf00      	nop
   d48c8:	2003e4f4 	.word	0x2003e4f4
   d48cc:	2003e490 	.word	0x2003e490
   d48d0:	000d40b3 	.word	0x000d40b3

000d48d4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d48d4:	b510      	push	{r4, lr}
   d48d6:	4604      	mov	r4, r0
{
	free(buffer);
   d48d8:	6800      	ldr	r0, [r0, #0]
   d48da:	f7ff ff93 	bl	d4804 <free>
}
   d48de:	4620      	mov	r0, r4
   d48e0:	bd10      	pop	{r4, pc}

000d48e2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d48e2:	b510      	push	{r4, lr}
   d48e4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d48e6:	6800      	ldr	r0, [r0, #0]
   d48e8:	b108      	cbz	r0, d48ee <_ZN6String10invalidateEv+0xc>
   d48ea:	f7ff ff8b 	bl	d4804 <free>
	buffer = NULL;
   d48ee:	2300      	movs	r3, #0
   d48f0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d48f2:	60a3      	str	r3, [r4, #8]
   d48f4:	6063      	str	r3, [r4, #4]
   d48f6:	bd10      	pop	{r4, pc}

000d48f8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d48f8:	b538      	push	{r3, r4, r5, lr}
   d48fa:	4604      	mov	r4, r0
   d48fc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d48fe:	6800      	ldr	r0, [r0, #0]
   d4900:	3101      	adds	r1, #1
   d4902:	f7ff ff87 	bl	d4814 <realloc>
	if (newbuffer) {
   d4906:	b110      	cbz	r0, d490e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4908:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d490c:	2001      	movs	r0, #1
	}
	return 0;
}
   d490e:	bd38      	pop	{r3, r4, r5, pc}

000d4910 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4910:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4912:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4914:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4916:	b113      	cbz	r3, d491e <_ZN6String7reserveEj+0xe>
   d4918:	6843      	ldr	r3, [r0, #4]
   d491a:	428b      	cmp	r3, r1
   d491c:	d207      	bcs.n	d492e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d491e:	4620      	mov	r0, r4
   d4920:	f7ff ffea 	bl	d48f8 <_ZN6String12changeBufferEj>
   d4924:	b120      	cbz	r0, d4930 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4926:	68a3      	ldr	r3, [r4, #8]
   d4928:	b90b      	cbnz	r3, d492e <_ZN6String7reserveEj+0x1e>
   d492a:	6822      	ldr	r2, [r4, #0]
   d492c:	7013      	strb	r3, [r2, #0]
   d492e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4930:	bd10      	pop	{r4, pc}

000d4932 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4932:	b570      	push	{r4, r5, r6, lr}
   d4934:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4936:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4938:	4604      	mov	r4, r0
   d493a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d493c:	f7ff ffe8 	bl	d4910 <_ZN6String7reserveEj>
   d4940:	b918      	cbnz	r0, d494a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4942:	4620      	mov	r0, r4
   d4944:	f7ff ffcd 	bl	d48e2 <_ZN6String10invalidateEv>
		return *this;
   d4948:	e009      	b.n	d495e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d494a:	462a      	mov	r2, r5
   d494c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d494e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4950:	6820      	ldr	r0, [r4, #0]
   d4952:	f001 fe6e 	bl	d6632 <memcpy>
	buffer[len] = 0;
   d4956:	6822      	ldr	r2, [r4, #0]
   d4958:	68a3      	ldr	r3, [r4, #8]
   d495a:	2100      	movs	r1, #0
   d495c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d495e:	4620      	mov	r0, r4
   d4960:	bd70      	pop	{r4, r5, r6, pc}

000d4962 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4962:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4964:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4966:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4968:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d496a:	6043      	str	r3, [r0, #4]
	len = 0;
   d496c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d496e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4970:	460d      	mov	r5, r1
   d4972:	b139      	cbz	r1, d4984 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4974:	4608      	mov	r0, r1
   d4976:	f001 feb3 	bl	d66e0 <strlen>
   d497a:	4629      	mov	r1, r5
   d497c:	4602      	mov	r2, r0
   d497e:	4620      	mov	r0, r4
   d4980:	f7ff ffd7 	bl	d4932 <_ZN6String4copyEPKcj>
}
   d4984:	4620      	mov	r0, r4
   d4986:	bd38      	pop	{r3, r4, r5, pc}

000d4988 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4988:	b538      	push	{r3, r4, r5, lr}
   d498a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d498c:	460c      	mov	r4, r1
   d498e:	b141      	cbz	r1, d49a2 <_ZN6StringaSEPKc+0x1a>
   d4990:	4608      	mov	r0, r1
   d4992:	f001 fea5 	bl	d66e0 <strlen>
   d4996:	4621      	mov	r1, r4
   d4998:	4602      	mov	r2, r0
   d499a:	4628      	mov	r0, r5
   d499c:	f7ff ffc9 	bl	d4932 <_ZN6String4copyEPKcj>
   d49a0:	e001      	b.n	d49a6 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d49a2:	f7ff ff9e 	bl	d48e2 <_ZN6String10invalidateEv>

	return *this;
}
   d49a6:	4628      	mov	r0, r5
   d49a8:	bd38      	pop	{r3, r4, r5, pc}

000d49aa <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d49aa:	4770      	bx	lr

000d49ac <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d49ac:	2000      	movs	r0, #0
   d49ae:	4770      	bx	lr

000d49b0 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d49b0:	4770      	bx	lr

000d49b2 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d49b2:	2000      	movs	r0, #0
   d49b4:	4770      	bx	lr

000d49b6 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d49b6:	4770      	bx	lr

000d49b8 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d49b8:	2000      	movs	r0, #0
   d49ba:	4770      	bx	lr

000d49bc <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d49bc:	b510      	push	{r4, lr}
   d49be:	2114      	movs	r1, #20
   d49c0:	4604      	mov	r4, r0
   d49c2:	f001 fcce 	bl	d6362 <_ZdlPvj>
   d49c6:	4620      	mov	r0, r4
   d49c8:	bd10      	pop	{r4, pc}

000d49ca <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d49ca:	b510      	push	{r4, lr}
   d49cc:	2114      	movs	r1, #20
   d49ce:	4604      	mov	r4, r0
   d49d0:	f001 fcc7 	bl	d6362 <_ZdlPvj>
   d49d4:	4620      	mov	r0, r4
   d49d6:	bd10      	pop	{r4, pc}

000d49d8 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d49d8:	b510      	push	{r4, lr}
   d49da:	2114      	movs	r1, #20
   d49dc:	4604      	mov	r4, r0
   d49de:	f001 fcc0 	bl	d6362 <_ZdlPvj>
   d49e2:	4620      	mov	r0, r4
   d49e4:	bd10      	pop	{r4, pc}

000d49e6 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d49e6:	f7ff bb58 	b.w	d409a <_ZdlPv>

000d49ea <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d49ea:	f7ff bb56 	b.w	d409a <_ZdlPv>

000d49ee <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d49ee:	f7ff bb54 	b.w	d409a <_ZdlPv>

000d49f2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d49f2:	b510      	push	{r4, lr}
   d49f4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d49f6:	6800      	ldr	r0, [r0, #0]
   d49f8:	b108      	cbz	r0, d49fe <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d49fa:	f7ff fddf 	bl	d45bc <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d49fe:	4620      	mov	r0, r4
   d4a00:	bd10      	pop	{r4, pc}
	...

000d4a04 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4a04:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d4a06:	200a      	movs	r0, #10
   d4a08:	4a02      	ldr	r2, [pc, #8]	; (d4a14 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d4a0a:	2100      	movs	r1, #0
   d4a0c:	f7ff fe66 	bl	d46dc <panic_>
    }
}
   d4a10:	bd08      	pop	{r3, pc}
   d4a12:	bf00      	nop
   d4a14:	000d4449 	.word	0x000d4449

000d4a18 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4a18:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4a1a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4a1c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4a1e:	689b      	ldr	r3, [r3, #8]
   d4a20:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4a22:	68a3      	ldr	r3, [r4, #8]
   d4a24:	3b01      	subs	r3, #1
   d4a26:	60a3      	str	r3, [r4, #8]
   d4a28:	b92b      	cbnz	r3, d4a36 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4a2a:	6823      	ldr	r3, [r4, #0]
   d4a2c:	4620      	mov	r0, r4
   d4a2e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4a34:	4718      	bx	r3
   d4a36:	bd10      	pop	{r4, pc}

000d4a38 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4a38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4a3c:	b2da      	uxtb	r2, r3
   d4a3e:	2a09      	cmp	r2, #9
   d4a40:	d801      	bhi.n	d4a46 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d4a42:	4618      	mov	r0, r3
   d4a44:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d4a46:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d4a4a:	2b05      	cmp	r3, #5
   d4a4c:	d801      	bhi.n	d4a52 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d4a4e:	3857      	subs	r0, #87	; 0x57
   d4a50:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d4a52:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d4a56:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d4a58:	bf94      	ite	ls
   d4a5a:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d4a5c:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d4a60:	4770      	bx	lr
	...

000d4a64 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4a64:	b510      	push	{r4, lr}
            locked_(false) {
   d4a66:	2300      	movs	r3, #0
   d4a68:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4a6a:	4b04      	ldr	r3, [pc, #16]	; (d4a7c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4a6c:	4604      	mov	r4, r0
   d4a6e:	6818      	ldr	r0, [r3, #0]
   d4a70:	f7ff fdac 	bl	d45cc <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d4a74:	2301      	movs	r3, #1
   d4a76:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4a78:	4620      	mov	r0, r4
   d4a7a:	bd10      	pop	{r4, pc}
   d4a7c:	2003e50c 	.word	0x2003e50c

000d4a80 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4a80:	b510      	push	{r4, lr}
        if (locked_) {
   d4a82:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4a84:	4604      	mov	r4, r0
        if (locked_) {
   d4a86:	b11b      	cbz	r3, d4a90 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4a88:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d4a8a:	6818      	ldr	r0, [r3, #0]
   d4a8c:	f7ff fda6 	bl	d45dc <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4a90:	4620      	mov	r0, r4
   d4a92:	bd10      	pop	{r4, pc}
   d4a94:	2003e50c 	.word	0x2003e50c

000d4a98 <_ZNK8particle10BleAddressixEh>:
    buf[len++] = '\0';
    return len;
}

uint8_t BleAddress::operator[](uint8_t i) const {
    if (i >= BLE_SIG_ADDR_LEN) {
   d4a98:	2905      	cmp	r1, #5
        return 0;
    }
    return address_.addr[i];
   d4a9a:	bf94      	ite	ls
   d4a9c:	5c40      	ldrbls	r0, [r0, r1]
    return len;
}

uint8_t BleAddress::operator[](uint8_t i) const {
    if (i >= BLE_SIG_ADDR_LEN) {
        return 0;
   d4a9e:	2000      	movhi	r0, #0
    }
    return address_.addr[i];
}
   d4aa0:	4770      	bx	lr

000d4aa2 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d4aa2:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d4aa4:	7982      	ldrb	r2, [r0, #6]
   d4aa6:	798b      	ldrb	r3, [r1, #6]
   d4aa8:	429a      	cmp	r2, r3
   d4aaa:	d106      	bne.n	d4aba <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4aac:	2206      	movs	r2, #6
   d4aae:	f001 fdb1 	bl	d6614 <memcmp>
   d4ab2:	fab0 f080 	clz	r0, r0
   d4ab6:	0940      	lsrs	r0, r0, #5
   d4ab8:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4aba:	2000      	movs	r0, #0
}
   d4abc:	bd08      	pop	{r3, pc}
	...

000d4ac0 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d4ac0:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d4ac2:	2301      	movs	r3, #1
   d4ac4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4ac6:	4b05      	ldr	r3, [pc, #20]	; (d4adc <_ZN8particle7BleUuidC1Ev+0x1c>)
   d4ac8:	4602      	mov	r2, r0
   d4aca:	f103 0110 	add.w	r1, r3, #16
   d4ace:	f853 4b04 	ldr.w	r4, [r3], #4
   d4ad2:	f842 4b04 	str.w	r4, [r2], #4
   d4ad6:	428b      	cmp	r3, r1
   d4ad8:	d1f9      	bne.n	d4ace <_ZN8particle7BleUuidC1Ev+0xe>
}
   d4ada:	bd10      	pop	{r4, pc}
   d4adc:	000d6a00 	.word	0x000d6a00

000d4ae0 <_ZN8particle7BleUuidC1ERKS0_>:
        type_ = BleUuidType::LONG;
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuid::BleUuid(const BleUuid& uuid)
   d4ae0:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d4ae2:	690b      	ldr	r3, [r1, #16]
   d4ae4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4ae6:	f101 0210 	add.w	r2, r1, #16
   d4aea:	4603      	mov	r3, r0
   d4aec:	f851 4b04 	ldr.w	r4, [r1], #4
   d4af0:	f843 4b04 	str.w	r4, [r3], #4
   d4af4:	4291      	cmp	r1, r2
   d4af6:	d1f9      	bne.n	d4aec <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d4af8:	bd10      	pop	{r4, pc}

000d4afa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4afa:	b510      	push	{r4, lr}
    if (uuid128) {
   d4afc:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4afe:	4604      	mov	r4, r0
    if (uuid128) {
   d4b00:	b1b9      	cbz	r1, d4b32 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d4b02:	2a01      	cmp	r2, #1
   d4b04:	d109      	bne.n	d4b1a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4b06:	4603      	mov	r3, r0
   d4b08:	f101 0210 	add.w	r2, r1, #16
   d4b0c:	f851 0b04 	ldr.w	r0, [r1], #4
   d4b10:	f843 0b04 	str.w	r0, [r3], #4
   d4b14:	4291      	cmp	r1, r2
   d4b16:	d1f9      	bne.n	d4b0c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d4b18:	e008      	b.n	d4b2c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d4b1a:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d4b1c:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d4b1e:	5c98      	ldrb	r0, [r3, r2]
   d4b20:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4b24:	3a01      	subs	r2, #1
   d4b26:	b2d2      	uxtb	r2, r2
   d4b28:	2aff      	cmp	r2, #255	; 0xff
   d4b2a:	d1f8      	bne.n	d4b1e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d4b2c:	2301      	movs	r3, #1
   d4b2e:	6123      	str	r3, [r4, #16]
   d4b30:	e002      	b.n	d4b38 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4b32:	2210      	movs	r2, #16
   d4b34:	f001 fda3 	bl	d667e <memset>
    }
}
   d4b38:	4620      	mov	r0, r4
   d4b3a:	bd10      	pop	{r4, pc}

000d4b3c <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
    type_ = BleUuidType::SHORT;
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d4b3c:	b538      	push	{r3, r4, r5, lr}
   d4b3e:	4605      	mov	r5, r0
   d4b40:	4614      	mov	r4, r2
        : BleUuid(uuid128, order) {
   d4b42:	461a      	mov	r2, r3
   d4b44:	f7ff ffd9 	bl	d4afa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d4b48:	732c      	strb	r4, [r5, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4b4a:	0a24      	lsrs	r4, r4, #8
   d4b4c:	736c      	strb	r4, [r5, #13]
}
   d4b4e:	4628      	mov	r0, r5
   d4b50:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4b54 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d4b54:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d4b56:	6902      	ldr	r2, [r0, #16]
   d4b58:	b90a      	cbnz	r2, d4b5e <_ZNK8particle7BleUuid7isValidEv+0xa>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d4b5a:	8980      	ldrh	r0, [r0, #12]
   d4b5c:	e003      	b.n	d4b66 <_ZNK8particle7BleUuid7isValidEv+0x12>
    } else {
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4b5e:	2210      	movs	r2, #16
   d4b60:	4903      	ldr	r1, [pc, #12]	; (d4b70 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d4b62:	f001 fd57 	bl	d6614 <memcmp>
   d4b66:	3000      	adds	r0, #0
   d4b68:	bf18      	it	ne
   d4b6a:	2001      	movne	r0, #1
    }
}
   d4b6c:	bd08      	pop	{r3, pc}
   d4b6e:	bf00      	nop
   d4b70:	000d6a00 	.word	0x000d6a00

000d4b74 <_ZNK8particle7BleUuid4typeEv>:

BleUuidType BleUuid::type() const {
    return type_;
}
   d4b74:	6900      	ldr	r0, [r0, #16]
   d4b76:	4770      	bx	lr

000d4b78 <_ZN8particle7BleUuid7halUUIDEv>:

hal_ble_uuid_t BleUuid::halUUID() {
   d4b78:	b538      	push	{r3, r4, r5, lr}
   d4b7a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d4b7c:	2214      	movs	r2, #20
   d4b7e:	2100      	movs	r1, #0

BleUuidType BleUuid::type() const {
    return type_;
}

hal_ble_uuid_t BleUuid::halUUID() {
   d4b80:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d4b82:	f001 fd7c 	bl	d667e <memset>
    if (type_ == BleUuidType::SHORT) {
   d4b86:	6923      	ldr	r3, [r4, #16]
   d4b88:	b92b      	cbnz	r3, d4b96 <_ZN8particle7BleUuid7halUUIDEv+0x1e>
        uuid.type = BLE_UUID_TYPE_16BIT;
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d4b8a:	7b62      	ldrb	r2, [r4, #13]
   d4b8c:	7b23      	ldrb	r3, [r4, #12]
   d4b8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4b92:	802b      	strh	r3, [r5, #0]
   d4b94:	e00a      	b.n	d4bac <_ZN8particle7BleUuid7halUUIDEv+0x34>
    } else {
        uuid.type = BLE_UUID_TYPE_128BIT;
   d4b96:	2301      	movs	r3, #1
   d4b98:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4b9a:	f104 0210 	add.w	r2, r4, #16
   d4b9e:	462b      	mov	r3, r5
   d4ba0:	f854 1b04 	ldr.w	r1, [r4], #4
   d4ba4:	f843 1b04 	str.w	r1, [r3], #4
   d4ba8:	4294      	cmp	r4, r2
   d4baa:	d1f9      	bne.n	d4ba0 <_ZN8particle7BleUuid7halUUIDEv+0x28>
    }
    return uuid;
}
   d4bac:	4628      	mov	r0, r5
   d4bae:	bd38      	pop	{r3, r4, r5, pc}

000d4bb0 <_ZNK8particle7BleUuid7shortedEv>:

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d4bb0:	7b42      	ldrb	r2, [r0, #13]
   d4bb2:	7b00      	ldrb	r0, [r0, #12]
}
   d4bb4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d4bb8:	4770      	bx	lr

000d4bba <_ZNK8particle7BleUuid8rawBytesEv>:
    return BLE_SIG_UUID_128BIT_LEN;
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}
   d4bba:	4770      	bx	lr

000d4bbc <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d4bbc:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d4bbe:	690b      	ldr	r3, [r1, #16]
   d4bc0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4bc2:	f101 0210 	add.w	r2, r1, #16
   d4bc6:	4603      	mov	r3, r0
   d4bc8:	f851 4b04 	ldr.w	r4, [r1], #4
   d4bcc:	f843 4b04 	str.w	r4, [r3], #4
   d4bd0:	4291      	cmp	r1, r2
   d4bd2:	d1f9      	bne.n	d4bc8 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d4bd4:	bd10      	pop	{r4, pc}

000d4bd6 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d4bd6:	b510      	push	{r4, lr}
   d4bd8:	b086      	sub	sp, #24
   d4bda:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d4bdc:	2201      	movs	r2, #1
   d4bde:	a801      	add	r0, sp, #4
   d4be0:	f7ff ff8b 	bl	d4afa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d4be4:	a901      	add	r1, sp, #4
   d4be6:	4620      	mov	r0, r4
   d4be8:	f7ff ffe8 	bl	d4bbc <_ZN8particle7BleUuidaSERKS0_>
}
   d4bec:	b006      	add	sp, #24
   d4bee:	bd10      	pop	{r4, pc}

000d4bf0 <_ZNK8particle7BleUuideqERKS0_>:

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    return *this = BleUuid(uuid);
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d4bf0:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d4bf2:	6902      	ldr	r2, [r0, #16]
   d4bf4:	690b      	ldr	r3, [r1, #16]
   d4bf6:	429a      	cmp	r2, r3
   d4bf8:	d106      	bne.n	d4c08 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d4bfa:	2210      	movs	r2, #16
   d4bfc:	f001 fd0a 	bl	d6614 <memcmp>
   d4c00:	fab0 f080 	clz	r0, r0
   d4c04:	0940      	lsrs	r0, r0, #5
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	2000      	movs	r0, #0
}
   d4c0a:	bd08      	pop	{r3, pc}

000d4c0c <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d4c0c:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d4c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d4c10:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4c12:	4b31      	ldr	r3, [pc, #196]	; (d4cd8 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d4c14:	460e      	mov	r6, r1
   d4c16:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4c18:	4602      	mov	r2, r0
   d4c1a:	f103 0110 	add.w	r1, r3, #16
   d4c1e:	f853 0b04 	ldr.w	r0, [r3], #4
   d4c22:	f842 0b04 	str.w	r0, [r2], #4
   d4c26:	428b      	cmp	r3, r1
   d4c28:	d1f9      	bne.n	d4c1e <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d4c2a:	2e00      	cmp	r6, #0
   d4c2c:	d051      	beq.n	d4cd2 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d4c2e:	2124      	movs	r1, #36	; 0x24
   d4c30:	4630      	mov	r0, r6
   d4c32:	f001 fd5d 	bl	d66f0 <strnlen>
   d4c36:	2804      	cmp	r0, #4
   d4c38:	d010      	beq.n	d4c5c <_ZN8particle7BleUuid9constructEPKc+0x50>
   d4c3a:	2700      	movs	r7, #0
   d4c3c:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4c3e:	2124      	movs	r1, #36	; 0x24
   d4c40:	4630      	mov	r0, r6
   d4c42:	f001 fd55 	bl	d66f0 <strnlen>
   d4c46:	42b8      	cmp	r0, r7
   d4c48:	d901      	bls.n	d4c4e <_ZN8particle7BleUuid9constructEPKc+0x42>
   d4c4a:	bb44      	cbnz	r4, d4c9e <_ZN8particle7BleUuid9constructEPKc+0x92>
   d4c4c:	e041      	b.n	d4cd2 <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d4c4e:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d4c50:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d4c52:	42a5      	cmp	r5, r4
   d4c54:	d03d      	beq.n	d4cd2 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d4c56:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d4c5a:	e7fa      	b.n	d4c52 <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4c5c:	7830      	ldrb	r0, [r6, #0]
   d4c5e:	f7ff feeb 	bl	d4a38 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4c62:	1e04      	subs	r4, r0, #0
   d4c64:	db18      	blt.n	d4c98 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d4c66:	7870      	ldrb	r0, [r6, #1]
   d4c68:	f7ff fee6 	bl	d4a38 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4c6c:	2800      	cmp	r0, #0
   d4c6e:	db13      	blt.n	d4c98 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4c70:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d4c74:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4c78:	78b0      	ldrb	r0, [r6, #2]
   d4c7a:	f7ff fedd 	bl	d4a38 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4c7e:	1e04      	subs	r4, r0, #0
   d4c80:	db0a      	blt.n	d4c98 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d4c82:	78f0      	ldrb	r0, [r6, #3]
   d4c84:	f7ff fed8 	bl	d4a38 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4c88:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4c8a:	bfa1      	itttt	ge
   d4c8c:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d4c90:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d4c94:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d4c96:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d4c98:	2300      	movs	r3, #0
   d4c9a:	612b      	str	r3, [r5, #16]
   d4c9c:	e019      	b.n	d4cd2 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d4c9e:	5df0      	ldrb	r0, [r6, r7]
   d4ca0:	f7ff feca 	bl	d4a38 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d4ca4:	0603      	lsls	r3, r0, #24
   d4ca6:	d412      	bmi.n	d4cce <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d4ca8:	3c01      	subs	r4, #1
   d4caa:	0100      	lsls	r0, r0, #4
   d4cac:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d4cae:	2124      	movs	r1, #36	; 0x24
   d4cb0:	4630      	mov	r0, r6
   d4cb2:	f001 fd1d 	bl	d66f0 <strnlen>
   d4cb6:	3701      	adds	r7, #1
   d4cb8:	4287      	cmp	r7, r0
   d4cba:	d208      	bcs.n	d4cce <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d4cbc:	5df0      	ldrb	r0, [r6, r7]
   d4cbe:	f7ff febb 	bl	d4a38 <_ZN8particle11hexToNibbleEc>
   d4cc2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d4cc4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d4cc6:	bfa2      	ittt	ge
   d4cc8:	5d2b      	ldrbge	r3, [r5, r4]
   d4cca:	4318      	orrge	r0, r3
   d4ccc:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4cce:	3701      	adds	r7, #1
   d4cd0:	e7b5      	b.n	d4c3e <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d4cd2:	b003      	add	sp, #12
   d4cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4cd6:	bf00      	nop
   d4cd8:	000d6a00 	.word	0x000d6a00

000d4cdc <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d4cdc:	b538      	push	{r3, r4, r5, lr}
   d4cde:	4604      	mov	r4, r0
   d4ce0:	460d      	mov	r5, r1
        : BleUuid() {
   d4ce2:	f7ff feed 	bl	d4ac0 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d4ce6:	4620      	mov	r0, r4
   d4ce8:	4629      	mov	r1, r5
   d4cea:	f7ff ff8f 	bl	d4c0c <_ZN8particle7BleUuid9constructEPKc>
}
   d4cee:	4620      	mov	r0, r4
   d4cf0:	bd38      	pop	{r3, r4, r5, pc}

000d4cf2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d4cf4:	b18b      	cbz	r3, d4d1a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d4cf6:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4cf8:	1ce5      	adds	r5, r4, #3
   d4cfa:	428d      	cmp	r5, r1
   d4cfc:	d80f      	bhi.n	d4d1e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d4cfe:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d4d00:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d4d02:	5d87      	ldrb	r7, [r0, r6]
   d4d04:	4297      	cmp	r7, r2
   d4d06:	d105      	bne.n	d4d14 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4d08:	442e      	add	r6, r5
   d4d0a:	42b1      	cmp	r1, r6
   d4d0c:	d307      	bcc.n	d4d1e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d4d0e:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d4d10:	1c68      	adds	r0, r5, #1
                return adsLen;
   d4d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d4d14:	3501      	adds	r5, #1
   d4d16:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4d18:	e7ee      	b.n	d4cf8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d4d1a:	4618      	mov	r0, r3
   d4d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d1e:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d4d20:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4d22 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4d22:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4d26:	4604      	mov	r4, r0
   d4d28:	460e      	mov	r6, r1
   d4d2a:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d4d2c:	4617      	mov	r7, r2
   d4d2e:	2a00      	cmp	r2, #0
   d4d30:	d03a      	beq.n	d4da8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d4d32:	460a      	mov	r2, r1
   d4d34:	ab01      	add	r3, sp, #4
   d4d36:	6a01      	ldr	r1, [r0, #32]
   d4d38:	f7ff ffdb 	bl	d4cf2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d4d3c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d4d40:	6a22      	ldr	r2, [r4, #32]
   d4d42:	bb03      	cbnz	r3, d4d86 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d4d44:	b1f8      	cbz	r0, d4d86 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4d46:	1c96      	adds	r6, r2, #2
   d4d48:	442e      	add	r6, r5
   d4d4a:	1a36      	subs	r6, r6, r0
   d4d4c:	2e1f      	cmp	r6, #31
   d4d4e:	d82b      	bhi.n	d4da8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4d50:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d4d54:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4d58:	ebc8 0202 	rsb	r2, r8, r2
   d4d5c:	1a12      	subs	r2, r2, r0
   d4d5e:	eb00 0108 	add.w	r1, r0, r8
   d4d62:	eb05 0009 	add.w	r0, r5, r9
   d4d66:	b292      	uxth	r2, r2
   d4d68:	4421      	add	r1, r4
   d4d6a:	4420      	add	r0, r4
   d4d6c:	f001 fc6c 	bl	d6648 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d4d70:	1c6b      	adds	r3, r5, #1
   d4d72:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d4d76:	462a      	mov	r2, r5
   d4d78:	4639      	mov	r1, r7
   d4d7a:	eb04 0009 	add.w	r0, r4, r9
   d4d7e:	f001 fc58 	bl	d6632 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d4d82:	6226      	str	r6, [r4, #32]
   d4d84:	e010      	b.n	d4da8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d4d86:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4d88:	182b      	adds	r3, r5, r0
   d4d8a:	2b1f      	cmp	r3, #31
   d4d8c:	d80c      	bhi.n	d4da8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d4d8e:	1c6b      	adds	r3, r5, #1
   d4d90:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4d92:	4422      	add	r2, r4
   d4d94:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4d96:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4d98:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4d9a:	4420      	add	r0, r4
   d4d9c:	462a      	mov	r2, r5
   d4d9e:	f001 fc48 	bl	d6632 <memcpy>
        selfLen_ += len;
   d4da2:	6a22      	ldr	r2, [r4, #32]
   d4da4:	442a      	add	r2, r5
   d4da6:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d4da8:	6a20      	ldr	r0, [r4, #32]
}
   d4daa:	b003      	add	sp, #12
   d4dac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4db0 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d4db0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4db2:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d4db4:	4603      	mov	r3, r0
   d4db6:	f100 021f 	add.w	r2, r0, #31
   d4dba:	2000      	movs	r0, #0
   d4dbc:	f803 0b01 	strb.w	r0, [r3], #1
   d4dc0:	4293      	cmp	r3, r2
   d4dc2:	f04f 0100 	mov.w	r1, #0
   d4dc6:	d1f9      	bne.n	d4dbc <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4dc8:	aa04      	add	r2, sp, #16
   d4dca:	2306      	movs	r3, #6
   d4dcc:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4dd0:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d4dd2:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4dd4:	9100      	str	r1, [sp, #0]
   d4dd6:	4620      	mov	r0, r4
   d4dd8:	4619      	mov	r1, r3
   d4dda:	f7ff ffa2 	bl	d4d22 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d4dde:	4620      	mov	r0, r4
   d4de0:	b004      	add	sp, #16
   d4de2:	bd10      	pop	{r4, pc}

000d4de4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4de4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4de6:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4de8:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4dea:	ab01      	add	r3, sp, #4
   d4dec:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4dee:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4df0:	f7ff ff7f 	bl	d4cf2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d4df4:	4605      	mov	r5, r0
   d4df6:	b178      	cbz	r0, d4e18 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d4df8:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d4dfa:	6a22      	ldr	r2, [r4, #32]
   d4dfc:	1829      	adds	r1, r5, r0
   d4dfe:	1a12      	subs	r2, r2, r0
   d4e00:	1b52      	subs	r2, r2, r5
   d4e02:	4421      	add	r1, r4
   d4e04:	4420      	add	r0, r4
   d4e06:	f001 fc14 	bl	d6632 <memcpy>
        selfLen_ -= len;
   d4e0a:	6a23      	ldr	r3, [r4, #32]
   d4e0c:	1b5d      	subs	r5, r3, r5
   d4e0e:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d4e10:	4631      	mov	r1, r6
   d4e12:	4620      	mov	r0, r4
   d4e14:	f7ff ffe6 	bl	d4de4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d4e18:	b002      	add	sp, #8
   d4e1a:	bd70      	pop	{r4, r5, r6, pc}

000d4e1c <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d4e1c:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d4e1e:	2500      	movs	r5, #0
   d4e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d4e24:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d4e26:	8043      	strh	r3, [r0, #2]
   d4e28:	220e      	movs	r2, #14
   d4e2a:	4629      	mov	r1, r5
   d4e2c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d4e2e:	7105      	strb	r5, [r0, #4]
   d4e30:	3006      	adds	r0, #6
   d4e32:	f001 fc24 	bl	d667e <memset>
   d4e36:	f104 0014 	add.w	r0, r4, #20
   d4e3a:	f7ff fe41 	bl	d4ac0 <_ZN8particle7BleUuidC1Ev>
   d4e3e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4e42:	f7ff fe3d 	bl	d4ac0 <_ZN8particle7BleUuidC1Ev>
   d4e46:	4904      	ldr	r1, [pc, #16]	; (d4e58 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d4e48:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4e4c:	f7ff fd89 	bl	d4962 <_ZN6StringC1EPK19__FlashStringHelper>
   d4e50:	64e5      	str	r5, [r4, #76]	; 0x4c
   d4e52:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d4e54:	4620      	mov	r0, r4
   d4e56:	bd38      	pop	{r3, r4, r5, pc}
   d4e58:	000d6ab7 	.word	0x000d6ab7

000d4e5c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d4e5c:	b510      	push	{r4, lr}
   d4e5e:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4e60:	69c2      	ldr	r2, [r0, #28]
   d4e62:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d4e66:	4293      	cmp	r3, r2
   d4e68:	4618      	mov	r0, r3
   d4e6a:	d006      	beq.n	d4e7a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d4e6c:	6804      	ldr	r4, [r0, #0]
   d4e6e:	8824      	ldrh	r4, [r4, #0]
   d4e70:	428c      	cmp	r4, r1
   d4e72:	f103 0308 	add.w	r3, r3, #8
   d4e76:	d1f6      	bne.n	d4e66 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d4e78:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d4e7a:	2000      	movs	r0, #0
    }
   d4e7c:	bd10      	pop	{r4, pc}
	...

000d4e80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d4e80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4e84:	4680      	mov	r8, r0
   d4e86:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d4e88:	460e      	mov	r6, r1
   d4e8a:	b369      	cbz	r1, d4ee8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d4e8c:	b362      	cbz	r2, d4ee8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d4e8e:	2af4      	cmp	r2, #244	; 0xf4
   d4e90:	6805      	ldr	r5, [r0, #0]
   d4e92:	bf28      	it	cs
   d4e94:	22f4      	movcs	r2, #244	; 0xf4
   d4e96:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d4e98:	782a      	ldrb	r2, [r5, #0]
   d4e9a:	b1a2      	cbz	r2, d4ec6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d4e9c:	792b      	ldrb	r3, [r5, #4]
   d4e9e:	0798      	lsls	r0, r3, #30
   d4ea0:	d507      	bpl.n	d4eb2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d4ea2:	2300      	movs	r3, #0
   d4ea4:	4622      	mov	r2, r4
   d4ea6:	89a8      	ldrh	r0, [r5, #12]
   d4ea8:	f7ff fb22 	bl	d44f0 <hal_ble_gatt_server_set_characteristic_value>
   d4eac:	2800      	cmp	r0, #0
   d4eae:	da02      	bge.n	d4eb6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d4eb0:	e043      	b.n	d4f3a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d4eb2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d4eb6:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d4eba:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d4ebc:	06da      	lsls	r2, r3, #27
   d4ebe:	d518      	bpl.n	d4ef2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d4ec0:	2f01      	cmp	r7, #1
   d4ec2:	d123      	bne.n	d4f0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d4ec4:	e015      	b.n	d4ef2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d4ec6:	8868      	ldrh	r0, [r5, #2]
   d4ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4ecc:	4298      	cmp	r0, r3
   d4ece:	d00d      	beq.n	d4eec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d4ed0:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d4ed2:	0759      	lsls	r1, r3, #29
   d4ed4:	d523      	bpl.n	d4f1e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d4ed6:	2f01      	cmp	r7, #1
   d4ed8:	d021      	beq.n	d4f1e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d4eda:	89a9      	ldrh	r1, [r5, #12]
   d4edc:	9200      	str	r2, [sp, #0]
   d4ede:	4623      	mov	r3, r4
   d4ee0:	4632      	mov	r2, r6
   d4ee2:	f7ff fb19 	bl	d4518 <hal_ble_gatt_client_write_without_response>
   d4ee6:	e028      	b.n	d4f3a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d4ee8:	4815      	ldr	r0, [pc, #84]	; (d4f40 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d4eea:	e026      	b.n	d4f3a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d4eec:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d4ef0:	e023      	b.n	d4f3a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d4ef2:	069a      	lsls	r2, r3, #26
   d4ef4:	d521      	bpl.n	d4f3a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d4ef6:	2f02      	cmp	r7, #2
   d4ef8:	d01f      	beq.n	d4f3a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d4efa:	89a8      	ldrh	r0, [r5, #12]
   d4efc:	2300      	movs	r3, #0
   d4efe:	4622      	mov	r2, r4
   d4f00:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d4f02:	b002      	add	sp, #8
   d4f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d4f08:	f7ff bb2e 	b.w	d4568 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d4f0c:	89a8      	ldrh	r0, [r5, #12]
   d4f0e:	2300      	movs	r3, #0
   d4f10:	4622      	mov	r2, r4
   d4f12:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d4f14:	b002      	add	sp, #8
   d4f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d4f1a:	f7ff bb1b 	b.w	d4554 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d4f1e:	071b      	lsls	r3, r3, #28
   d4f20:	d501      	bpl.n	d4f26 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d4f22:	2f02      	cmp	r7, #2
   d4f24:	d102      	bne.n	d4f2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d4f26:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d4f2a:	e006      	b.n	d4f3a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d4f2c:	2300      	movs	r3, #0
   d4f2e:	89a9      	ldrh	r1, [r5, #12]
   d4f30:	9300      	str	r3, [sp, #0]
   d4f32:	4632      	mov	r2, r6
   d4f34:	4623      	mov	r3, r4
   d4f36:	f7ff fae5 	bl	d4504 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d4f3a:	b002      	add	sp, #8
   d4f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4f40:	fffffef2 	.word	0xfffffef2

000d4f44 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d4f44:	b510      	push	{r4, lr}
    return impl()->address();
   d4f46:	680a      	ldr	r2, [r1, #0]
   d4f48:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d4f4c:	6003      	str	r3, [r0, #0]
   d4f4e:	6853      	ldr	r3, [r2, #4]
   d4f50:	6043      	str	r3, [r0, #4]
}
   d4f52:	bd10      	pop	{r4, pc}

000d4f54 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d4f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d4f56:	6802      	ldr	r2, [r0, #0]
   d4f58:	680b      	ldr	r3, [r1, #0]
   d4f5a:	8812      	ldrh	r2, [r2, #0]
   d4f5c:	881b      	ldrh	r3, [r3, #0]
   d4f5e:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d4f60:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d4f62:	d10c      	bne.n	d4f7e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d4f64:	4601      	mov	r1, r0
   d4f66:	4668      	mov	r0, sp
   d4f68:	f7ff ffec 	bl	d4f44 <_ZNK8particle13BlePeerDevice7addressEv>
   d4f6c:	4621      	mov	r1, r4
   d4f6e:	a802      	add	r0, sp, #8
   d4f70:	f7ff ffe8 	bl	d4f44 <_ZNK8particle13BlePeerDevice7addressEv>
   d4f74:	a902      	add	r1, sp, #8
   d4f76:	4668      	mov	r0, sp
   d4f78:	f7ff fd93 	bl	d4aa2 <_ZNK8particle10BleAddresseqERKS0_>
   d4f7c:	b900      	cbnz	r0, d4f80 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d4f7e:	2000      	movs	r0, #0
}
   d4f80:	b004      	add	sp, #16
   d4f82:	bd10      	pop	{r4, pc}

000d4f84 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d4f84:	b510      	push	{r4, lr}
   d4f86:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4f88:	2034      	movs	r0, #52	; 0x34
   d4f8a:	f7ff f884 	bl	d4096 <_Znwj>
   d4f8e:	4601      	mov	r1, r0
   d4f90:	b168      	cbz	r0, d4fae <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4f92:	2300      	movs	r3, #0
   d4f94:	6003      	str	r3, [r0, #0]
   d4f96:	6043      	str	r3, [r0, #4]
   d4f98:	6083      	str	r3, [r0, #8]
   d4f9a:	60c3      	str	r3, [r0, #12]
   d4f9c:	6103      	str	r3, [r0, #16]
   d4f9e:	6143      	str	r3, [r0, #20]
   d4fa0:	6183      	str	r3, [r0, #24]
   d4fa2:	61c3      	str	r3, [r0, #28]
   d4fa4:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d4fa6:	6243      	str	r3, [r0, #36]	; 0x24
   d4fa8:	6283      	str	r3, [r0, #40]	; 0x28
   d4faa:	62c3      	str	r3, [r0, #44]	; 0x2c
   d4fac:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4fae:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d4fb0:	b919      	cbnz	r1, d4fba <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d4fb2:	4a0a      	ldr	r2, [pc, #40]	; (d4fdc <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d4fb4:	200a      	movs	r0, #10
   d4fb6:	f7ff fb91 	bl	d46dc <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d4fba:	2000      	movs	r0, #0
   d4fbc:	f7ff fa54 	bl	d4468 <hal_ble_stack_init>
   d4fc0:	b120      	cbz	r0, d4fcc <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d4fc2:	4a06      	ldr	r2, [pc, #24]	; (d4fdc <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d4fc4:	2100      	movs	r1, #0
   d4fc6:	200a      	movs	r0, #10
   d4fc8:	f7ff fb88 	bl	d46dc <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d4fcc:	2200      	movs	r2, #0
   d4fce:	6821      	ldr	r1, [r4, #0]
   d4fd0:	4803      	ldr	r0, [pc, #12]	; (d4fe0 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d4fd2:	f7ff fab5 	bl	d4540 <hal_ble_set_callback_on_periph_link_events>
}
   d4fd6:	4620      	mov	r0, r4
   d4fd8:	bd10      	pop	{r4, pc}
   d4fda:	bf00      	nop
   d4fdc:	000d4449 	.word	0x000d4449
   d4fe0:	000d5401 	.word	0x000d5401

000d4fe4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d4fe4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d4fe6:	4c0a      	ldr	r4, [pc, #40]	; (d5010 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d4fe8:	6823      	ldr	r3, [r4, #0]
   d4fea:	07db      	lsls	r3, r3, #31
   d4fec:	d40e      	bmi.n	d500c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4fee:	4620      	mov	r0, r4
   d4ff0:	f7ff f857 	bl	d40a2 <__cxa_guard_acquire>
   d4ff4:	b150      	cbz	r0, d500c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4ff6:	4807      	ldr	r0, [pc, #28]	; (d5014 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4ff8:	f7ff ffc4 	bl	d4f84 <_ZN8particle14BleLocalDeviceC1Ev>
   d4ffc:	4620      	mov	r0, r4
   d4ffe:	f7ff f855 	bl	d40ac <__cxa_guard_release>
   d5002:	4a05      	ldr	r2, [pc, #20]	; (d5018 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5004:	4905      	ldr	r1, [pc, #20]	; (d501c <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5006:	4803      	ldr	r0, [pc, #12]	; (d5014 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5008:	f001 f9a6 	bl	d6358 <__aeabi_atexit>
    return instance;
}
   d500c:	4801      	ldr	r0, [pc, #4]	; (d5014 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d500e:	bd10      	pop	{r4, pc}
   d5010:	2003e504 	.word	0x2003e504
   d5014:	2003e500 	.word	0x2003e500
   d5018:	2003e490 	.word	0x2003e490
   d501c:	000d5217 	.word	0x000d5217

000d5020 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5020:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5022:	6803      	ldr	r3, [r0, #0]
   d5024:	3b09      	subs	r3, #9
   d5026:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5028:	b08a      	sub	sp, #40	; 0x28
   d502a:	4604      	mov	r4, r0
   d502c:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d502e:	d819      	bhi.n	d5064 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5030:	f7ff ffd8 	bl	d4fe4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5034:	88a1      	ldrh	r1, [r4, #4]
   d5036:	6800      	ldr	r0, [r0, #0]
   d5038:	f7ff ff10 	bl	d4e5c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d503c:	4602      	mov	r2, r0
   d503e:	b958      	cbnz	r0, d5058 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d5040:	2320      	movs	r3, #32
   d5042:	9302      	str	r3, [sp, #8]
   d5044:	4b08      	ldr	r3, [pc, #32]	; (d5068 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d5046:	9003      	str	r0, [sp, #12]
   d5048:	9300      	str	r3, [sp, #0]
   d504a:	aa02      	add	r2, sp, #8
   d504c:	4603      	mov	r3, r0
   d504e:	4907      	ldr	r1, [pc, #28]	; (d506c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d5050:	2032      	movs	r0, #50	; 0x32
   d5052:	f7ff fb4b 	bl	d46ec <log_message>
   d5056:	e005      	b.n	d5064 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d5058:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d505a:	b11d      	cbz	r5, d5064 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d505c:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d505e:	68e1      	ldr	r1, [r4, #12]
   d5060:	6920      	ldr	r0, [r4, #16]
   d5062:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d5064:	b00a      	add	sp, #40	; 0x28
   d5066:	bd70      	pop	{r4, r5, r6, pc}
   d5068:	000d68aa 	.word	0x000d68aa
   d506c:	000d6860 	.word	0x000d6860

000d5070 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d5070:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5072:	a801      	add	r0, sp, #4
   d5074:	f7ff fcf6 	bl	d4a64 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d5078:	2000      	movs	r0, #0
   d507a:	f7ff f9f5 	bl	d4468 <hal_ble_stack_init>
   d507e:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d5080:	a801      	add	r0, sp, #4
   d5082:	f7ff fcfd 	bl	d4a80 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d5086:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d508a:	b002      	add	sp, #8
   d508c:	bd10      	pop	{r4, pc}

000d508e <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   d508e:	b513      	push	{r0, r1, r4, lr}
   d5090:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5092:	a801      	add	r0, sp, #4
   d5094:	f7ff fce6 	bl	d4a64 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   d5098:	2100      	movs	r1, #0
   d509a:	4620      	mov	r0, r4
   d509c:	f7ff f9f4 	bl	d4488 <hal_ble_gap_set_tx_power>
   d50a0:	4604      	mov	r4, r0
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
    WiringBleLock lk;
   d50a2:	a801      	add	r0, sp, #4
   d50a4:	f7ff fcec 	bl	d4a80 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_set_tx_power(txPower, nullptr);
}
   d50a8:	4620      	mov	r0, r4
   d50aa:	b002      	add	sp, #8
   d50ac:	bd10      	pop	{r4, pc}

000d50ae <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
int BleLocalDevice::txPower(int8_t* txPower) const {
    WiringBleLock lk;
    return hal_ble_gap_get_tx_power(txPower, nullptr);
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   d50ae:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   d50b0:	2100      	movs	r1, #0
   d50b2:	f7ff b9e1 	b.w	d4478 <hal_ble_select_antenna>

000d50b6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d50b6:	4608      	mov	r0, r1
   d50b8:	b909      	cbnz	r1, d50be <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d50ba:	460a      	mov	r2, r1
   d50bc:	e001      	b.n	d50c2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d50be:	6a09      	ldr	r1, [r1, #32]
   d50c0:	2200      	movs	r2, #0
   d50c2:	f7ff b9e9 	b.w	d4498 <hal_ble_gap_set_advertising_data>

000d50c6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d50c6:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d50c8:	460c      	mov	r4, r1
   d50ca:	b911      	cbnz	r1, d50d2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d50cc:	460a      	mov	r2, r1
   d50ce:	4608      	mov	r0, r1
   d50d0:	e006      	b.n	d50e0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d50d2:	2101      	movs	r1, #1
   d50d4:	4620      	mov	r0, r4
   d50d6:	f7ff fe85 	bl	d4de4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d50da:	6a21      	ldr	r1, [r4, #32]
   d50dc:	2200      	movs	r2, #0
   d50de:	4620      	mov	r0, r4
    }
}
   d50e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d50e4:	f7ff b9e0 	b.w	d44a8 <hal_ble_gap_set_scan_response_data>

000d50e8 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d50e8:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d50ea:	a801      	add	r0, sp, #4
   d50ec:	f7ff fcba 	bl	d4a64 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d50f0:	2000      	movs	r0, #0
   d50f2:	f7ff f9e1 	bl	d44b8 <hal_ble_gap_start_advertising>
   d50f6:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d50f8:	a801      	add	r0, sp, #4
   d50fa:	f7ff fcc1 	bl	d4a80 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d50fe:	4620      	mov	r0, r4
   d5100:	b002      	add	sp, #8
   d5102:	bd10      	pop	{r4, pc}

000d5104 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5104:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5106:	4605      	mov	r5, r0
   d5108:	460c      	mov	r4, r1
    WiringBleLock lk;
   d510a:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d510c:	4616      	mov	r6, r2
    WiringBleLock lk;
   d510e:	f7ff fca9 	bl	d4a64 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d5112:	4621      	mov	r1, r4
   d5114:	4628      	mov	r0, r5
   d5116:	f7ff ffce 	bl	d50b6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d511a:	2800      	cmp	r0, #0
   d511c:	db08      	blt.n	d5130 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d511e:	4631      	mov	r1, r6
   d5120:	4628      	mov	r0, r5
   d5122:	f7ff ffd0 	bl	d50c6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d5126:	2800      	cmp	r0, #0
   d5128:	db02      	blt.n	d5130 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d512a:	4628      	mov	r0, r5
   d512c:	f7ff ffdc 	bl	d50e8 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d5130:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d5132:	a801      	add	r0, sp, #4
   d5134:	f7ff fca4 	bl	d4a80 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d5138:	4620      	mov	r0, r4
   d513a:	b002      	add	sp, #8
   d513c:	bd70      	pop	{r4, r5, r6, pc}

000d513e <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d513e:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d5140:	69d8      	ldr	r0, [r3, #28]
}
   d5142:	2800      	cmp	r0, #0
   d5144:	bfd4      	ite	le
   d5146:	2000      	movle	r0, #0
   d5148:	2001      	movgt	r0, #1
   d514a:	4770      	bx	lr

000d514c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d514c:	680b      	ldr	r3, [r1, #0]
   d514e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5150:	b113      	cbz	r3, d5158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5152:	685a      	ldr	r2, [r3, #4]
   d5154:	3201      	adds	r2, #1
   d5156:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5158:	4770      	bx	lr

000d515a <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d515a:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d515c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5160:	4604      	mov	r4, r0
   d5162:	f840 3b04 	str.w	r3, [r0], #4
   d5166:	f7ff fff1 	bl	d514c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d516a:	6823      	ldr	r3, [r4, #0]
   d516c:	b90b      	cbnz	r3, d5172 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d516e:	f7ff fc49 	bl	d4a04 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d5172:	4620      	mov	r0, r4
   d5174:	bd10      	pop	{r4, pc}

000d5176 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5176:	b510      	push	{r4, lr}
   d5178:	f851 3b04 	ldr.w	r3, [r1], #4
   d517c:	4604      	mov	r4, r0
   d517e:	f840 3b04 	str.w	r3, [r0], #4
   d5182:	f7ff ffe3 	bl	d514c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5186:	4620      	mov	r0, r4
   d5188:	bd10      	pop	{r4, pc}

000d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d518a:	b510      	push	{r4, lr}
   d518c:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d518e:	6800      	ldr	r0, [r0, #0]
   d5190:	b128      	cbz	r0, d519e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5192:	6843      	ldr	r3, [r0, #4]
   d5194:	3b01      	subs	r3, #1
   d5196:	6043      	str	r3, [r0, #4]
   d5198:	b90b      	cbnz	r3, d519e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d519a:	f7ff fc3d 	bl	d4a18 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d519e:	4620      	mov	r0, r4
   d51a0:	bd10      	pop	{r4, pc}

000d51a2 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d51a2:	b510      	push	{r4, lr}
   d51a4:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d51a6:	3004      	adds	r0, #4
   d51a8:	f7ff ffef 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d51ac:	4620      	mov	r0, r4
   d51ae:	bd10      	pop	{r4, pc}

000d51b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d51b0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d51b2:	6804      	ldr	r4, [r0, #0]
   d51b4:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d51b6:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d51b8:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d51bc:	42a6      	cmp	r6, r4
   d51be:	d004      	beq.n	d51ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d51c0:	1d20      	adds	r0, r4, #4
   d51c2:	f7ff ffe2 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51c6:	3408      	adds	r4, #8
   d51c8:	e7f8      	b.n	d51bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d51ca:	6828      	ldr	r0, [r5, #0]
   d51cc:	f7ff fb1a 	bl	d4804 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d51d0:	4628      	mov	r0, r5
   d51d2:	bd70      	pop	{r4, r5, r6, pc}

000d51d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d51d4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d51d6:	6804      	ldr	r4, [r0, #0]
   d51d8:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d51da:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d51dc:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d51e0:	42a6      	cmp	r6, r4
   d51e2:	d004      	beq.n	d51ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d51e4:	1d20      	adds	r0, r4, #4
   d51e6:	f7ff ffd0 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51ea:	3408      	adds	r4, #8
   d51ec:	e7f8      	b.n	d51e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d51ee:	6828      	ldr	r0, [r5, #0]
   d51f0:	f7ff fb08 	bl	d4804 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d51f4:	4628      	mov	r0, r5
   d51f6:	bd70      	pop	{r4, r5, r6, pc}

000d51f8 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d51f8:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d51fa:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d51fc:	f104 0018 	add.w	r0, r4, #24
   d5200:	f7ff ffe8 	bl	d51d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5204:	f104 000c 	add.w	r0, r4, #12
   d5208:	f7ff ffd2 	bl	d51b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d520c:	4620      	mov	r0, r4
   d520e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5212:	f7fe bf42 	b.w	d409a <_ZdlPv>

000d5216 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5218:	6804      	ldr	r4, [r0, #0]
   d521a:	4607      	mov	r7, r0
   d521c:	b1c4      	cbz	r4, d5250 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d521e:	69a5      	ldr	r5, [r4, #24]
   d5220:	69e3      	ldr	r3, [r4, #28]
   d5222:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5226:	42ae      	cmp	r6, r5
   d5228:	d004      	beq.n	d5234 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d522a:	1d28      	adds	r0, r5, #4
   d522c:	f7ff ffad 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5230:	3508      	adds	r5, #8
   d5232:	e7f8      	b.n	d5226 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5234:	69a0      	ldr	r0, [r4, #24]
   d5236:	f7ff fae5 	bl	d4804 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d523a:	f104 000c 	add.w	r0, r4, #12
   d523e:	f7ff ffc9 	bl	d51d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5242:	4620      	mov	r0, r4
   d5244:	f7ff ffb4 	bl	d51b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5248:	2134      	movs	r1, #52	; 0x34
   d524a:	4620      	mov	r0, r4
   d524c:	f001 f889 	bl	d6362 <_ZdlPvj>
   d5250:	4638      	mov	r0, r7
   d5252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5254 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5254:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5256:	2500      	movs	r5, #0
   d5258:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d525a:	6045      	str	r5, [r0, #4]
   d525c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d525e:	2024      	movs	r0, #36	; 0x24
   d5260:	f7fe ff19 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5264:	4604      	mov	r4, r0
   d5266:	b178      	cbz	r0, d5288 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5268:	4603      	mov	r3, r0
   d526a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d526e:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5272:	f8c0 5002 	str.w	r5, [r0, #2]
   d5276:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5278:	7285      	strb	r5, [r0, #10]
   d527a:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d527c:	60c5      	str	r5, [r0, #12]
   d527e:	6105      	str	r5, [r0, #16]
   d5280:	6145      	str	r5, [r0, #20]
   d5282:	6185      	str	r5, [r0, #24]
   d5284:	61c5      	str	r5, [r0, #28]
   d5286:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5288:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d528a:	2014      	movs	r0, #20
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	f7fe ff02 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5292:	4603      	mov	r3, r0
   d5294:	b128      	cbz	r0, d52a2 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5296:	2201      	movs	r2, #1
   d5298:	6042      	str	r2, [r0, #4]
   d529a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d529c:	4a08      	ldr	r2, [pc, #32]	; (d52c0 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d529e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d52a0:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d52a2:	a802      	add	r0, sp, #8
   d52a4:	6872      	ldr	r2, [r6, #4]
   d52a6:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d52aa:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d52ac:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d52ae:	f7ff ff6c 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d52b2:	6833      	ldr	r3, [r6, #0]
   d52b4:	b90b      	cbnz	r3, d52ba <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d52b6:	f7ff fba5 	bl	d4a04 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d52ba:	4630      	mov	r0, r6
   d52bc:	b002      	add	sp, #8
   d52be:	bd70      	pop	{r4, r5, r6, pc}
   d52c0:	000d683c 	.word	0x000d683c

000d52c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d52c4:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d52c6:	b570      	push	{r4, r5, r6, lr}
   d52c8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d52ca:	d91a      	bls.n	d5302 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d52cc:	4290      	cmp	r0, r2
   d52ce:	d219      	bcs.n	d5304 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d52d0:	f1a1 0608 	sub.w	r6, r1, #8
   d52d4:	1a51      	subs	r1, r2, r1
   d52d6:	3904      	subs	r1, #4
   d52d8:	1f15      	subs	r5, r2, #4
   d52da:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d52dc:	1f2b      	subs	r3, r5, #4
   d52de:	429e      	cmp	r6, r3
   d52e0:	d025      	beq.n	d532e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d52e2:	2c04      	cmp	r4, #4
   d52e4:	d007      	beq.n	d52f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d52e6:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d52ea:	f844 3c04 	str.w	r3, [r4, #-4]
   d52ee:	4629      	mov	r1, r5
   d52f0:	4620      	mov	r0, r4
   d52f2:	f7ff ff2b 	bl	d514c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d52f6:	4628      	mov	r0, r5
   d52f8:	f7ff ff47 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52fc:	3d08      	subs	r5, #8
   d52fe:	3c08      	subs	r4, #8
   d5300:	e7ec      	b.n	d52dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d5302:	d014      	beq.n	d532e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d5304:	1d0c      	adds	r4, r1, #4
   d5306:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d5308:	1f23      	subs	r3, r4, #4
   d530a:	429d      	cmp	r5, r3
   d530c:	d00f      	beq.n	d532e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d530e:	2e04      	cmp	r6, #4
   d5310:	d007      	beq.n	d5322 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5312:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d5316:	f846 3c04 	str.w	r3, [r6, #-4]
   d531a:	4621      	mov	r1, r4
   d531c:	4630      	mov	r0, r6
   d531e:	f7ff ff15 	bl	d514c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5322:	4620      	mov	r0, r4
   d5324:	f7ff ff31 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5328:	3408      	adds	r4, #8
   d532a:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d532c:	e7ec      	b.n	d5308 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d532e:	bd70      	pop	{r4, r5, r6, pc}

000d5330 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5334:	6804      	ldr	r4, [r0, #0]
   d5336:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5338:	4605      	mov	r5, r0
   d533a:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d533c:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5340:	42a7      	cmp	r7, r4
   d5342:	d018      	beq.n	d5376 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d5344:	4641      	mov	r1, r8
   d5346:	4620      	mov	r0, r4
   d5348:	f7ff fe04 	bl	d4f54 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d534c:	4606      	mov	r6, r0
   d534e:	b908      	cbnz	r0, d5354 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5350:	3408      	adds	r4, #8
   d5352:	e7f5      	b.n	d5340 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d5354:	b18c      	cbz	r4, d537a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d5356:	1d20      	adds	r0, r4, #4
   d5358:	f7ff ff17 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d535c:	682b      	ldr	r3, [r5, #0]
   d535e:	686a      	ldr	r2, [r5, #4]
   d5360:	f104 0108 	add.w	r1, r4, #8
   d5364:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5368:	4620      	mov	r0, r4
   d536a:	f7ff ffab 	bl	d52c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d536e:	686b      	ldr	r3, [r5, #4]
   d5370:	3b01      	subs	r3, #1
   d5372:	606b      	str	r3, [r5, #4]
    return true;
   d5374:	e002      	b.n	d537c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5376:	2600      	movs	r6, #0
   d5378:	e000      	b.n	d537c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d537a:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d537c:	4630      	mov	r0, r6
   d537e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5382 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5384:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5386:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d538a:	6847      	ldr	r7, [r0, #4]
   d538c:	9300      	str	r3, [sp, #0]
   d538e:	a801      	add	r0, sp, #4
   d5390:	f7ff fedc 	bl	d514c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5394:	6866      	ldr	r6, [r4, #4]
   d5396:	68a3      	ldr	r3, [r4, #8]
   d5398:	429e      	cmp	r6, r3
   d539a:	db14      	blt.n	d53c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d539c:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d539e:	2e00      	cmp	r6, #0
   d53a0:	dd0b      	ble.n	d53ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d53a2:	00f0      	lsls	r0, r6, #3
   d53a4:	f7ff fa26 	bl	d47f4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d53a8:	4605      	mov	r5, r0
   d53aa:	b318      	cbz	r0, d53f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d53ac:	e894 0006 	ldmia.w	r4, {r1, r2}
   d53b0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d53b4:	f7ff ff86 	bl	d52c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d53b8:	e000      	b.n	d53bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d53ba:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d53bc:	6820      	ldr	r0, [r4, #0]
   d53be:	f7ff fa21 	bl	d4804 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d53c2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d53c4:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d53c6:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d53c8:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d53ca:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d53ce:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d53d2:	4629      	mov	r1, r5
   d53d4:	f105 0008 	add.w	r0, r5, #8
   d53d8:	f7ff ff74 	bl	d52c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d53dc:	b135      	cbz	r5, d53ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d53de:	9b00      	ldr	r3, [sp, #0]
   d53e0:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d53e4:	a901      	add	r1, sp, #4
   d53e6:	1d28      	adds	r0, r5, #4
   d53e8:	f7ff feb0 	bl	d514c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d53ec:	6863      	ldr	r3, [r4, #4]
   d53ee:	3301      	adds	r3, #1
   d53f0:	6063      	str	r3, [r4, #4]
   d53f2:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d53f4:	a801      	add	r0, sp, #4
   d53f6:	f7ff fec8 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d53fa:	4628      	mov	r0, r5
   d53fc:	b003      	add	sp, #12
   d53fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5400 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5404:	4604      	mov	r4, r0
   d5406:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5408:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d540a:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d540c:	f7ff fb2a 	bl	d4a64 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5410:	6823      	ldr	r3, [r4, #0]
   d5412:	2b03      	cmp	r3, #3
   d5414:	d002      	beq.n	d541c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d5416:	2b04      	cmp	r3, #4
   d5418:	d042      	beq.n	d54a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d541a:	e087      	b.n	d552c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d541c:	a804      	add	r0, sp, #16
   d541e:	f7ff ff19 	bl	d5254 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5422:	9b04      	ldr	r3, [sp, #16]
   d5424:	8922      	ldrh	r2, [r4, #8]
   d5426:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5428:	6862      	ldr	r2, [r4, #4]
   d542a:	9904      	ldr	r1, [sp, #16]
   d542c:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d5430:	f8c1 3002 	str.w	r3, [r1, #2]
   d5434:	6853      	ldr	r3, [r2, #4]
   d5436:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d543a:	a807      	add	r0, sp, #28
   d543c:	9b04      	ldr	r3, [sp, #16]
   d543e:	9306      	str	r3, [sp, #24]
   d5440:	a905      	add	r1, sp, #20
   d5442:	f7ff fe83 	bl	d514c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5446:	a906      	add	r1, sp, #24
   d5448:	f105 0018 	add.w	r0, r5, #24
   d544c:	f7ff ff99 	bl	d5382 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5450:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5452:	a807      	add	r0, sp, #28
   d5454:	f7ff fe99 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5458:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d545a:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d545c:	b974      	cbnz	r4, d547c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d545e:	4b36      	ldr	r3, [pc, #216]	; (d5538 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5460:	9300      	str	r3, [sp, #0]
   d5462:	aa06      	add	r2, sp, #24
   d5464:	4623      	mov	r3, r4
   d5466:	4935      	ldr	r1, [pc, #212]	; (d553c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5468:	9407      	str	r4, [sp, #28]
   d546a:	2032      	movs	r0, #50	; 0x32
   d546c:	f7ff f93e 	bl	d46ec <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5470:	9b04      	ldr	r3, [sp, #16]
   d5472:	4621      	mov	r1, r4
   d5474:	8818      	ldrh	r0, [r3, #0]
   d5476:	f7ff f827 	bl	d44c8 <hal_ble_gap_disconnect>
   d547a:	e00d      	b.n	d5498 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d547c:	4a30      	ldr	r2, [pc, #192]	; (d5540 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d547e:	9200      	str	r2, [sp, #0]
   d5480:	2300      	movs	r3, #0
   d5482:	aa06      	add	r2, sp, #24
   d5484:	492d      	ldr	r1, [pc, #180]	; (d553c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5486:	9307      	str	r3, [sp, #28]
   d5488:	2001      	movs	r0, #1
   d548a:	f7ff f92f 	bl	d46ec <log_message>
                if (impl->connectedCb_) {
   d548e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5490:	b113      	cbz	r3, d5498 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5492:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5494:	a804      	add	r0, sp, #16
   d5496:	4798      	blx	r3
   d5498:	a805      	add	r0, sp, #20
   d549a:	f7ff fe76 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d549e:	e045      	b.n	d552c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d54a0:	8921      	ldrh	r1, [r4, #8]
   d54a2:	4628      	mov	r0, r5
   d54a4:	f7ff fcda 	bl	d4e5c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d54a8:	4607      	mov	r7, r0
   d54aa:	2800      	cmp	r0, #0
   d54ac:	d03e      	beq.n	d552c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d54ae:	6804      	ldr	r4, [r0, #0]
   d54b0:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d54b2:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d54b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d54b8:	8022      	strh	r2, [r4, #0]
   d54ba:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d54be:	4299      	cmp	r1, r3
   d54c0:	d003      	beq.n	d54ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d54c2:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d54c6:	8042      	strh	r2, [r0, #2]
   d54c8:	e7f9      	b.n	d54be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d54ca:	68e6      	ldr	r6, [r4, #12]
   d54cc:	6923      	ldr	r3, [r4, #16]
   d54ce:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d54d2:	45b0      	cmp	r8, r6
   d54d4:	d004      	beq.n	d54e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d54d6:	1d30      	adds	r0, r6, #4
   d54d8:	f7ff fe57 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d54dc:	3608      	adds	r6, #8
   d54de:	e7f8      	b.n	d54d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d54e0:	2300      	movs	r3, #0
   d54e2:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d54e4:	69a6      	ldr	r6, [r4, #24]
   d54e6:	69e3      	ldr	r3, [r4, #28]
   d54e8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d54ec:	45b0      	cmp	r8, r6
   d54ee:	d004      	beq.n	d54fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d54f0:	1d30      	adds	r0, r6, #4
   d54f2:	f7ff fe4a 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d54f6:	3608      	adds	r6, #8
   d54f8:	e7f8      	b.n	d54ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d54fa:	2300      	movs	r3, #0
   d54fc:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d54fe:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d5500:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d5502:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5504:	b113      	cbz	r3, d550c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5506:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5508:	4638      	mov	r0, r7
   d550a:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d550c:	2320      	movs	r3, #32
   d550e:	4a0d      	ldr	r2, [pc, #52]	; (d5544 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d5510:	9306      	str	r3, [sp, #24]
   d5512:	9200      	str	r2, [sp, #0]
   d5514:	2300      	movs	r3, #0
   d5516:	4909      	ldr	r1, [pc, #36]	; (d553c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5518:	9307      	str	r3, [sp, #28]
   d551a:	2001      	movs	r0, #1
   d551c:	aa06      	add	r2, sp, #24
   d551e:	f7ff f8e5 	bl	d46ec <log_message>
                    impl->peers_.removeOne(*peer);
   d5522:	4639      	mov	r1, r7
   d5524:	f105 0018 	add.w	r0, r5, #24
   d5528:	f7ff ff02 	bl	d5330 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d552c:	a803      	add	r0, sp, #12
   d552e:	f7ff faa7 	bl	d4a80 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d5532:	b00e      	add	sp, #56	; 0x38
   d5534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5538:	000d68c2 	.word	0x000d68c2
   d553c:	000d6860 	.word	0x000d6860
   d5540:	000d68e8 	.word	0x000d68e8
   d5544:	000d6905 	.word	0x000d6905

000d5548 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5548:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d554a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d554c:	4606      	mov	r6, r0
   d554e:	460c      	mov	r4, r1
   d5550:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5552:	d914      	bls.n	d557e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5554:	4290      	cmp	r0, r2
   d5556:	d213      	bcs.n	d5580 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5558:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d555c:	1a6c      	subs	r4, r5, r1
   d555e:	f1a1 0708 	sub.w	r7, r1, #8
   d5562:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5564:	42af      	cmp	r7, r5
   d5566:	d018      	beq.n	d559a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5568:	b11c      	cbz	r4, d5572 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d556a:	4629      	mov	r1, r5
   d556c:	4620      	mov	r0, r4
   d556e:	f7ff fe02 	bl	d5176 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5572:	1d28      	adds	r0, r5, #4
   d5574:	f7ff fe09 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5578:	3d08      	subs	r5, #8
   d557a:	3c08      	subs	r4, #8
   d557c:	e7f2      	b.n	d5564 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d557e:	d00c      	beq.n	d559a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5580:	42ac      	cmp	r4, r5
   d5582:	d00a      	beq.n	d559a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5584:	b11e      	cbz	r6, d558e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5586:	4621      	mov	r1, r4
   d5588:	4630      	mov	r0, r6
   d558a:	f7ff fdf4 	bl	d5176 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d558e:	1d20      	adds	r0, r4, #4
   d5590:	f7ff fdfb 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5594:	3408      	adds	r4, #8
   d5596:	3608      	adds	r6, #8
   d5598:	e7f2      	b.n	d5580 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d559a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d559c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d559c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d559e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d55a0:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d55a2:	dd0b      	ble.n	d55bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d55a4:	00f0      	lsls	r0, r6, #3
   d55a6:	f7ff f925 	bl	d47f4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d55aa:	4604      	mov	r4, r0
   d55ac:	b170      	cbz	r0, d55cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d55ae:	e895 0006 	ldmia.w	r5, {r1, r2}
   d55b2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d55b6:	f7ff ffc7 	bl	d5548 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d55ba:	e000      	b.n	d55be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d55bc:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d55be:	6828      	ldr	r0, [r5, #0]
   d55c0:	f7ff f920 	bl	d4804 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d55c4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d55c6:	60ae      	str	r6, [r5, #8]
        return true;
   d55c8:	2001      	movs	r0, #1
   d55ca:	bd70      	pop	{r4, r5, r6, pc}
    }
   d55cc:	bd70      	pop	{r4, r5, r6, pc}

000d55ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d55ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d55d0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d55d2:	6845      	ldr	r5, [r0, #4]
   d55d4:	4668      	mov	r0, sp
   d55d6:	f7ff fdce 	bl	d5176 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d55da:	6861      	ldr	r1, [r4, #4]
   d55dc:	68a3      	ldr	r3, [r4, #8]
   d55de:	4299      	cmp	r1, r3
   d55e0:	db05      	blt.n	d55ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d55e2:	3101      	adds	r1, #1
   d55e4:	4620      	mov	r0, r4
   d55e6:	f7ff ffd9 	bl	d559c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d55ea:	4606      	mov	r6, r0
   d55ec:	b198      	cbz	r0, d5616 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d55ee:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d55f0:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d55f2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d55f6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d55fa:	4629      	mov	r1, r5
   d55fc:	f105 0008 	add.w	r0, r5, #8
   d5600:	f7ff ffa2 	bl	d5548 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5604:	b11d      	cbz	r5, d560e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5606:	4669      	mov	r1, sp
   d5608:	4628      	mov	r0, r5
   d560a:	f7ff fdb4 	bl	d5176 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d560e:	6863      	ldr	r3, [r4, #4]
   d5610:	3301      	adds	r3, #1
   d5612:	6063      	str	r3, [r4, #4]
   d5614:	2601      	movs	r6, #1
   d5616:	a801      	add	r0, sp, #4
   d5618:	f7ff fdb7 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d561c:	4630      	mov	r0, r6
   d561e:	b002      	add	sp, #8
   d5620:	bd70      	pop	{r4, r5, r6, pc}

000d5622 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5622:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5626:	4606      	mov	r6, r0
   d5628:	460c      	mov	r4, r1
   d562a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d562c:	d914      	bls.n	d5658 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d562e:	4290      	cmp	r0, r2
   d5630:	d213      	bcs.n	d565a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5632:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5636:	1a6c      	subs	r4, r5, r1
   d5638:	f1a1 0708 	sub.w	r7, r1, #8
   d563c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d563e:	42af      	cmp	r7, r5
   d5640:	d018      	beq.n	d5674 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5642:	b11c      	cbz	r4, d564c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5644:	4629      	mov	r1, r5
   d5646:	4620      	mov	r0, r4
   d5648:	f7ff fd87 	bl	d515a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d564c:	1d28      	adds	r0, r5, #4
   d564e:	f7ff fd9c 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5652:	3d08      	subs	r5, #8
   d5654:	3c08      	subs	r4, #8
   d5656:	e7f2      	b.n	d563e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5658:	d00c      	beq.n	d5674 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d565a:	42ac      	cmp	r4, r5
   d565c:	d00a      	beq.n	d5674 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d565e:	b11e      	cbz	r6, d5668 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5660:	4621      	mov	r1, r4
   d5662:	4630      	mov	r0, r6
   d5664:	f7ff fd79 	bl	d515a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5668:	1d20      	adds	r0, r4, #4
   d566a:	f7ff fd8e 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d566e:	3408      	adds	r4, #8
   d5670:	3608      	adds	r6, #8
   d5672:	e7f2      	b.n	d565a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5676 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5676:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5678:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d567a:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d567c:	dd0b      	ble.n	d5696 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d567e:	00f0      	lsls	r0, r6, #3
   d5680:	f7ff f8b8 	bl	d47f4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5684:	4604      	mov	r4, r0
   d5686:	b170      	cbz	r0, d56a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5688:	e895 0006 	ldmia.w	r5, {r1, r2}
   d568c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5690:	f7ff ffc7 	bl	d5622 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5694:	e000      	b.n	d5698 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5696:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5698:	6828      	ldr	r0, [r5, #0]
   d569a:	f7ff f8b3 	bl	d4804 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d569e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d56a0:	60ae      	str	r6, [r5, #8]
        return true;
   d56a2:	2001      	movs	r0, #1
   d56a4:	bd70      	pop	{r4, r5, r6, pc}
    }
   d56a6:	bd70      	pop	{r4, r5, r6, pc}

000d56a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d56a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d56aa:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d56ac:	6845      	ldr	r5, [r0, #4]
   d56ae:	4668      	mov	r0, sp
   d56b0:	f7ff fd53 	bl	d515a <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d56b4:	6861      	ldr	r1, [r4, #4]
   d56b6:	68a3      	ldr	r3, [r4, #8]
   d56b8:	4299      	cmp	r1, r3
   d56ba:	db05      	blt.n	d56c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d56bc:	3101      	adds	r1, #1
   d56be:	4620      	mov	r0, r4
   d56c0:	f7ff ffd9 	bl	d5676 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d56c4:	4606      	mov	r6, r0
   d56c6:	b198      	cbz	r0, d56f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d56c8:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d56ca:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d56cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d56d0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d56d4:	4629      	mov	r1, r5
   d56d6:	f105 0008 	add.w	r0, r5, #8
   d56da:	f7ff ffa2 	bl	d5622 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d56de:	b11d      	cbz	r5, d56e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d56e0:	4669      	mov	r1, sp
   d56e2:	4628      	mov	r0, r5
   d56e4:	f7ff fd39 	bl	d515a <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d56e8:	6863      	ldr	r3, [r4, #4]
   d56ea:	3301      	adds	r3, #1
   d56ec:	6063      	str	r3, [r4, #4]
   d56ee:	2601      	movs	r6, #1
   d56f0:	a801      	add	r0, sp, #4
   d56f2:	f7ff fd4a 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d56f6:	4630      	mov	r0, r6
   d56f8:	b002      	add	sp, #8
   d56fa:	bd70      	pop	{r4, r5, r6, pc}

000d56fc <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d56fc:	b510      	push	{r4, lr}
   d56fe:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5700:	6840      	ldr	r0, [r0, #4]
   d5702:	b108      	cbz	r0, d5708 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5704:	f7fe fcc9 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5708:	4620      	mov	r0, r4
   d570a:	bd10      	pop	{r4, pc}

000d570c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d570c:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d570e:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5710:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5712:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d5716:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d571a:	f7ff f8db 	bl	d48d4 <_ZN6StringD1Ev>
   d571e:	4668      	mov	r0, sp
   d5720:	f7ff ffec 	bl	d56fc <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5724:	b003      	add	sp, #12
   d5726:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d572c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d572c:	b538      	push	{r3, r4, r5, lr}
   d572e:	2300      	movs	r3, #0
   d5730:	4604      	mov	r4, r0
   d5732:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5734:	2014      	movs	r0, #20
   d5736:	460d      	mov	r5, r1
   d5738:	f7fe fcad 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d573c:	b128      	cbz	r0, d574a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d573e:	2301      	movs	r3, #1
   d5740:	6043      	str	r3, [r0, #4]
   d5742:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5744:	4b02      	ldr	r3, [pc, #8]	; (d5750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5746:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5748:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d574a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d574c:	4620      	mov	r0, r4
   d574e:	bd38      	pop	{r3, r4, r5, pc}
   d5750:	000d6804 	.word	0x000d6804

000d5754 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d5754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5758:	b088      	sub	sp, #32
   d575a:	4605      	mov	r5, r0
   d575c:	461e      	mov	r6, r3
   d575e:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5760:	2300      	movs	r3, #0
   d5762:	460f      	mov	r7, r1
   d5764:	4690      	mov	r8, r2
   d5766:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5768:	9305      	str	r3, [sp, #20]
   d576a:	f7fe fc94 	bl	d4096 <_Znwj>
   d576e:	f8cd d018 	str.w	sp, [sp, #24]
   d5772:	4604      	mov	r4, r0
   d5774:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5776:	b1c0      	cbz	r0, d57aa <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x56>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d5778:	f898 8000 	ldrb.w	r8, [r8]
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d577c:	f7ff fb4e 	bl	d4e1c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d5780:	4639      	mov	r1, r7
   d5782:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d5786:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d578a:	f7ff f8fd 	bl	d4988 <_ZN6StringaSEPKc>
        callback_ = callback;
   d578e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d5790:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d5792:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d5794:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d5796:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d5798:	f104 0014 	add.w	r0, r4, #20
   d579c:	f7ff fa0e 	bl	d4bbc <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d57a0:	990e      	ldr	r1, [sp, #56]	; 0x38
   d57a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d57a6:	f7ff fa09 	bl	d4bbc <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d57aa:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d57ac:	2600      	movs	r6, #0
   d57ae:	ab01      	add	r3, sp, #4
   d57b0:	aa02      	add	r2, sp, #8
   d57b2:	a803      	add	r0, sp, #12
   d57b4:	9607      	str	r6, [sp, #28]
   d57b6:	f7ff ffb9 	bl	d572c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d57ba:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d57bc:	9a05      	ldr	r2, [sp, #20]
   d57be:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d57c0:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d57c2:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d57c4:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d57c6:	f7ff fce0 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d57ca:	a806      	add	r0, sp, #24
   d57cc:	f7ff ff96 	bl	d56fc <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d57d0:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d57d2:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d57d4:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d57d6:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d57d8:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d57da:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d57dc:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d57de:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d57e0:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d57e4:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d57e6:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d57e8:	f7ff fccf 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57ec:	a805      	add	r0, sp, #20
   d57ee:	f7ff fccc 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d57f2:	6829      	ldr	r1, [r5, #0]
   d57f4:	b919      	cbnz	r1, d57fe <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xaa>
        SPARK_ASSERT(false);
   d57f6:	4a03      	ldr	r2, [pc, #12]	; (d5804 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xb0>)
   d57f8:	200a      	movs	r0, #10
   d57fa:	f7fe ff6f 	bl	d46dc <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d57fe:	b008      	add	sp, #32
   d5800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5804:	000d4449 	.word	0x000d4449

000d5808 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5808:	b510      	push	{r4, lr}
   d580a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d580c:	6840      	ldr	r0, [r0, #4]
   d580e:	b108      	cbz	r0, d5814 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5810:	f7fe fc43 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5814:	4620      	mov	r0, r4
   d5816:	bd10      	pop	{r4, pc}

000d5818 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5818:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d581a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d581c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d581e:	e88d 0009 	stmia.w	sp, {r0, r3}
   d5822:	4668      	mov	r0, sp
   d5824:	f7ff fff0 	bl	d5808 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5828:	b003      	add	sp, #12
   d582a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5830:	b538      	push	{r3, r4, r5, lr}
   d5832:	2300      	movs	r3, #0
   d5834:	4604      	mov	r4, r0
   d5836:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5838:	2014      	movs	r0, #20
   d583a:	460d      	mov	r5, r1
   d583c:	f7fe fc2b 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5840:	b128      	cbz	r0, d584e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5842:	2301      	movs	r3, #1
   d5844:	6043      	str	r3, [r0, #4]
   d5846:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5848:	4b02      	ldr	r3, [pc, #8]	; (d5854 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d584a:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d584c:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d584e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5850:	4620      	mov	r0, r4
   d5852:	bd38      	pop	{r3, r4, r5, pc}
   d5854:	000d6820 	.word	0x000d6820

000d5858 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d5858:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d585a:	2600      	movs	r6, #0
   d585c:	b087      	sub	sp, #28
   d585e:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5860:	6046      	str	r6, [r0, #4]
   d5862:	4604      	mov	r4, r0
   d5864:	2018      	movs	r0, #24
   d5866:	460f      	mov	r7, r1
   d5868:	f7fe fc15 	bl	d4096 <_Znwj>
   d586c:	f8cd d010 	str.w	sp, [sp, #16]
   d5870:	4605      	mov	r5, r0
   d5872:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5874:	b138      	cbz	r0, d5886 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d5876:	f7ff f923 	bl	d4ac0 <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d587a:	4639      	mov	r1, r7
   d587c:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d587e:	82ae      	strh	r6, [r5, #20]
   d5880:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d5882:	f7ff f99b 	bl	d4bbc <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5886:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5888:	4629      	mov	r1, r5
   d588a:	9305      	str	r3, [sp, #20]
   d588c:	aa02      	add	r2, sp, #8
   d588e:	ab01      	add	r3, sp, #4
   d5890:	a803      	add	r0, sp, #12
   d5892:	f7ff ffcd 	bl	d5830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5896:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5898:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d589a:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d589c:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d589e:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d58a0:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d58a2:	f7ff fc72 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d58a6:	a804      	add	r0, sp, #16
   d58a8:	f7ff ffae 	bl	d5808 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d58ac:	6823      	ldr	r3, [r4, #0]
   d58ae:	b90b      	cbnz	r3, d58b4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d58b0:	f7ff f8a8 	bl	d4a04 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d58b4:	4620      	mov	r0, r4
   d58b6:	b007      	add	sp, #28
   d58b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d58bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d58bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d58c0:	4617      	mov	r7, r2
   d58c2:	b0a1      	sub	sp, #132	; 0x84
   d58c4:	4680      	mov	r8, r0
    WiringBleLock lk;
   d58c6:	a80a      	add	r0, sp, #40	; 0x28
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d58c8:	460e      	mov	r6, r1
    WiringBleLock lk;
   d58ca:	f7ff f8cb 	bl	d4a64 <_ZN8particle3ble13WiringBleLockC1Ev>
   d58ce:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d58d0:	7923      	ldrb	r3, [r4, #4]
   d58d2:	2b00      	cmp	r3, #0
   d58d4:	f000 80de 	beq.w	d5a94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d58d8:	6833      	ldr	r3, [r6, #0]
   d58da:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d58dc:	691b      	ldr	r3, [r3, #16]
   d58de:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d58e2:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d58e4:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d58e8:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d58ec:	9b03      	ldr	r3, [sp, #12]
   d58ee:	42ab      	cmp	r3, r5
   d58f0:	d023      	beq.n	d593a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d58f2:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d58f6:	4650      	mov	r0, sl
   d58f8:	f109 0114 	add.w	r1, r9, #20
   d58fc:	f7ff f978 	bl	d4bf0 <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5900:	2800      	cmp	r0, #0
   d5902:	f000 80cc 	beq.w	d5a9e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d5906:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d590a:	4658      	mov	r0, fp
   d590c:	f7ff f970 	bl	d4bf0 <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5910:	2800      	cmp	r0, #0
   d5912:	f000 80c4 	beq.w	d5a9e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5916:	6823      	ldr	r3, [r4, #0]
   d5918:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d591c:	f8d9 3000 	ldr.w	r3, [r9]
   d5920:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d5924:	4299      	cmp	r1, r3
   d5926:	f040 80ba 	bne.w	d5a9e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d592a:	2320      	movs	r3, #32
   d592c:	4a60      	ldr	r2, [pc, #384]	; (d5ab0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d592e:	9315      	str	r3, [sp, #84]	; 0x54
   d5930:	2300      	movs	r3, #0
   d5932:	9200      	str	r2, [sp, #0]
   d5934:	9316      	str	r3, [sp, #88]	; 0x58
   d5936:	aa15      	add	r2, sp, #84	; 0x54
   d5938:	e0a8      	b.n	d5a8c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d593a:	f104 0928 	add.w	r9, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d593e:	4648      	mov	r0, r9
   d5940:	f7ff f908 	bl	d4b54 <_ZNK8particle7BleUuid7isValidEv>
   d5944:	b918      	cbnz	r0, d594e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d5946:	495b      	ldr	r1, [pc, #364]	; (d5ab4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d5948:	4648      	mov	r0, r9
   d594a:	f7ff f944 	bl	d4bd6 <_ZN8particle7BleUuidaSEPKh>
   d594e:	6833      	ldr	r3, [r6, #0]
   d5950:	681d      	ldr	r5, [r3, #0]
   d5952:	685b      	ldr	r3, [r3, #4]
   d5954:	eb05 0ac3 	add.w	sl, r5, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5958:	4555      	cmp	r5, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d595a:	4649      	mov	r1, r9
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d595c:	d005      	beq.n	d596a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d595e:	6828      	ldr	r0, [r5, #0]
   d5960:	f7ff f946 	bl	d4bf0 <_ZNK8particle7BleUuideqERKS0_>
   d5964:	bb58      	cbnz	r0, d59be <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x102>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5966:	3508      	adds	r5, #8
   d5968:	e7f6      	b.n	d5958 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d596a:	a80b      	add	r0, sp, #44	; 0x2c
   d596c:	f7ff ff74 	bl	d5858 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d5970:	4649      	mov	r1, r9
   d5972:	a815      	add	r0, sp, #84	; 0x54
   d5974:	f7ff f900 	bl	d4b78 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d5978:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d597a:	2300      	movs	r3, #0
   d597c:	3214      	adds	r2, #20
   d597e:	a915      	add	r1, sp, #84	; 0x54
   d5980:	2001      	movs	r0, #1
   d5982:	f7fe fdab 	bl	d44dc <hal_ble_gatt_server_add_service>
   d5986:	2800      	cmp	r0, #0
   d5988:	d178      	bne.n	d5a7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d598a:	6835      	ldr	r5, [r6, #0]
   d598c:	a90b      	add	r1, sp, #44	; 0x2c
   d598e:	a80d      	add	r0, sp, #52	; 0x34
   d5990:	f7ff fbf1 	bl	d5176 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d5994:	4628      	mov	r0, r5
   d5996:	a90d      	add	r1, sp, #52	; 0x34
   d5998:	f7ff fe19 	bl	d55ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d599c:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d599e:	a80e      	add	r0, sp, #56	; 0x38
   d59a0:	f7ff fbf3 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d59a4:	2d00      	cmp	r5, #0
   d59a6:	d069      	beq.n	d5a7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
   d59a8:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d59aa:	6855      	ldr	r5, [r2, #4]
   d59ac:	f105 5300 	add.w	r3, r5, #536870912	; 0x20000000
   d59b0:	6815      	ldr	r5, [r2, #0]
   d59b2:	3b01      	subs	r3, #1
   d59b4:	a80c      	add	r0, sp, #48	; 0x30
   d59b6:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d59ba:	f7ff fbe6 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d59be:	f104 0914 	add.w	r9, r4, #20
   d59c2:	4648      	mov	r0, r9
   d59c4:	f7ff f8c6 	bl	d4b54 <_ZNK8particle7BleUuid7isValidEv>
   d59c8:	b968      	cbnz	r0, d59e6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x12a>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d59ca:	4b3b      	ldr	r3, [pc, #236]	; (d5ab8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d59cc:	4939      	ldr	r1, [pc, #228]	; (d5ab4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d59ce:	881a      	ldrh	r2, [r3, #0]
   d59d0:	3201      	adds	r2, #1
   d59d2:	b292      	uxth	r2, r2
   d59d4:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d59d6:	a815      	add	r0, sp, #84	; 0x54
   d59d8:	2301      	movs	r3, #1
   d59da:	f7ff f8af 	bl	d4b3c <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d59de:	a915      	add	r1, sp, #84	; 0x54
   d59e0:	4648      	mov	r0, r9
   d59e2:	f7ff f8eb 	bl	d4bbc <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d59e6:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d59ea:	4652      	mov	r2, sl
   d59ec:	2100      	movs	r1, #0
   d59ee:	a815      	add	r0, sp, #84	; 0x54
   d59f0:	f000 fe45 	bl	d667e <memset>
    charInit.version = BLE_API_VERSION;
   d59f4:	2301      	movs	r3, #1
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d59f6:	4649      	mov	r1, r9
   d59f8:	a804      	add	r0, sp, #16
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d59fa:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    charInit.size = sizeof(hal_ble_char_init_t);
   d59fe:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    charInit.uuid = charImpl->charUUID().halUUID();
   d5a02:	f7ff f8b9 	bl	d4b78 <_ZN8particle7BleUuid7halUUIDEv>
   d5a06:	ab04      	add	r3, sp, #16
   d5a08:	aa18      	add	r2, sp, #96	; 0x60
   d5a0a:	f10d 0c20 	add.w	ip, sp, #32
   d5a0e:	6818      	ldr	r0, [r3, #0]
   d5a10:	6859      	ldr	r1, [r3, #4]
   d5a12:	4696      	mov	lr, r2
   d5a14:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d5a18:	3308      	adds	r3, #8
   d5a1a:	4563      	cmp	r3, ip
   d5a1c:	4672      	mov	r2, lr
   d5a1e:	d1f6      	bne.n	d5a0e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x152>
   d5a20:	6818      	ldr	r0, [r3, #0]
   d5a22:	f8ce 0000 	str.w	r0, [lr]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   d5a26:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   d5a28:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d5a2c:	682b      	ldr	r3, [r5, #0]
   d5a2e:	8a9b      	ldrh	r3, [r3, #20]
   d5a30:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d5a34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5a36:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5a38:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d5a3a:	4b20      	ldr	r3, [pc, #128]	; (d5abc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
   d5a3c:	931e      	str	r3, [sp, #120]	; 0x78
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5a3e:	1da1      	adds	r1, r4, #6
   d5a40:	a815      	add	r0, sp, #84	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d5a42:	941f      	str	r4, [sp, #124]	; 0x7c
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5a44:	f7fe fd72 	bl	d452c <hal_ble_gatt_server_add_characteristic>
   d5a48:	bb20      	cbnz	r0, d5a94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        return characteristic;
    }
    charImpl->local() = true;
   d5a4a:	2301      	movs	r3, #1
   d5a4c:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d5a4e:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d5a50:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d5a52:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d5a54:	a80d      	add	r0, sp, #52	; 0x34
   d5a56:	f7ff fb80 	bl	d515a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5a5a:	4620      	mov	r0, r4
   d5a5c:	a90d      	add	r1, sp, #52	; 0x34
   d5a5e:	f7ff fe23 	bl	d56a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d5a62:	4604      	mov	r4, r0
   d5a64:	a80e      	add	r0, sp, #56	; 0x38
   d5a66:	f7ff fb90 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a6a:	b99c      	cbnz	r4, d5a94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        LOG(ERROR, "Failed to append local characteristic.");
   d5a6c:	2320      	movs	r3, #32
   d5a6e:	930d      	str	r3, [sp, #52]	; 0x34
   d5a70:	4b13      	ldr	r3, [pc, #76]	; (d5ac0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d5a72:	9300      	str	r3, [sp, #0]
   d5a74:	940e      	str	r4, [sp, #56]	; 0x38
   d5a76:	4623      	mov	r3, r4
   d5a78:	aa0d      	add	r2, sp, #52	; 0x34
   d5a7a:	e007      	b.n	d5a8c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d5a7c:	4639      	mov	r1, r7
   d5a7e:	4640      	mov	r0, r8
   d5a80:	f7ff fb6b 	bl	d515a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5a84:	a80c      	add	r0, sp, #48	; 0x30
   d5a86:	f7ff fb80 	bl	d518a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a8a:	e00a      	b.n	d5aa2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5a8c:	490d      	ldr	r1, [pc, #52]	; (d5ac4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
   d5a8e:	2032      	movs	r0, #50	; 0x32
   d5a90:	f7fe fe2c 	bl	d46ec <log_message>
            return characteristic;
   d5a94:	4639      	mov	r1, r7
   d5a96:	4640      	mov	r0, r8
   d5a98:	f7ff fb5f 	bl	d515a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5a9c:	e001      	b.n	d5aa2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
   d5a9e:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d5aa0:	e724      	b.n	d58ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d5aa2:	a80a      	add	r0, sp, #40	; 0x28
   d5aa4:	f7fe ffec 	bl	d4a80 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d5aa8:	4640      	mov	r0, r8
   d5aaa:	b021      	add	sp, #132	; 0x84
   d5aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5ab0:	000d69d5 	.word	0x000d69d5
   d5ab4:	000d6850 	.word	0x000d6850
   d5ab8:	2003e508 	.word	0x2003e508
   d5abc:	000d5021 	.word	0x000d5021
   d5ac0:	000d69ae 	.word	0x000d69ae
   d5ac4:	000d6860 	.word	0x000d6860

000d5ac8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5ac8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5aca:	4c06      	ldr	r4, [pc, #24]	; (d5ae4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5acc:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5ace:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5ad0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5ad2:	f7fe fd6b 	bl	d45ac <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5ad6:	4620      	mov	r0, r4
   d5ad8:	4a03      	ldr	r2, [pc, #12]	; (d5ae8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5ada:	4904      	ldr	r1, [pc, #16]	; (d5aec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5ae0:	f000 bc3a 	b.w	d6358 <__aeabi_atexit>
   d5ae4:	2003e50c 	.word	0x2003e50c
   d5ae8:	2003e490 	.word	0x2003e490
   d5aec:	000d49f3 	.word	0x000d49f3

000d5af0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5af2:	4606      	mov	r6, r0
   d5af4:	460d      	mov	r5, r1
   d5af6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5af8:	2400      	movs	r4, #0
  while (size--) {
   d5afa:	42bd      	cmp	r5, r7
   d5afc:	d00c      	beq.n	d5b18 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5afe:	6833      	ldr	r3, [r6, #0]
   d5b00:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5b04:	689b      	ldr	r3, [r3, #8]
   d5b06:	4630      	mov	r0, r6
   d5b08:	4798      	blx	r3
     if (chunk>=0)
   d5b0a:	2800      	cmp	r0, #0
   d5b0c:	db01      	blt.n	d5b12 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5b0e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5b10:	e7f3      	b.n	d5afa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5b12:	2c00      	cmp	r4, #0
   d5b14:	bf08      	it	eq
   d5b16:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5b18:	4620      	mov	r0, r4
   d5b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b1c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5b1c:	b570      	push	{r4, r5, r6, lr}
   d5b1e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5b20:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5b22:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5b24:	b149      	cbz	r1, d5b3a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5b26:	f000 fddb 	bl	d66e0 <strlen>
   d5b2a:	682b      	ldr	r3, [r5, #0]
   d5b2c:	4602      	mov	r2, r0
   d5b2e:	4621      	mov	r1, r4
   d5b30:	4628      	mov	r0, r5
   d5b32:	68db      	ldr	r3, [r3, #12]
    }
   d5b34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5b38:	4718      	bx	r3
    }
   d5b3a:	bd70      	pop	{r4, r5, r6, pc}

000d5b3c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5b3c:	6803      	ldr	r3, [r0, #0]
   d5b3e:	689b      	ldr	r3, [r3, #8]
   d5b40:	4718      	bx	r3

000d5b42 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5b42:	b530      	push	{r4, r5, lr}
   d5b44:	b08b      	sub	sp, #44	; 0x2c
   d5b46:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5b48:	2100      	movs	r1, #0
   d5b4a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5b4e:	2a01      	cmp	r2, #1
   d5b50:	bf98      	it	ls
   d5b52:	220a      	movls	r2, #10
   d5b54:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5b58:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5b5c:	fb05 3312 	mls	r3, r5, r2, r3
   d5b60:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5b64:	2b09      	cmp	r3, #9
   d5b66:	bf94      	ite	ls
   d5b68:	3330      	addls	r3, #48	; 0x30
   d5b6a:	3337      	addhi	r3, #55	; 0x37
   d5b6c:	b2db      	uxtb	r3, r3
   d5b6e:	4621      	mov	r1, r4
   d5b70:	f804 3901 	strb.w	r3, [r4], #-1
   d5b74:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5b76:	2d00      	cmp	r5, #0
   d5b78:	d1ee      	bne.n	d5b58 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5b7a:	f7ff ffcf 	bl	d5b1c <_ZN5Print5writeEPKc>
}
   d5b7e:	b00b      	add	sp, #44	; 0x2c
   d5b80:	bd30      	pop	{r4, r5, pc}
	...

000d5b84 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5b84:	4b01      	ldr	r3, [pc, #4]	; (d5b8c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5b86:	4a02      	ldr	r2, [pc, #8]	; (d5b90 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5b88:	601a      	str	r2, [r3, #0]
   d5b8a:	4770      	bx	lr
   d5b8c:	2003e510 	.word	0x2003e510
   d5b90:	000d6a83 	.word	0x000d6a83

000d5b94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5b94:	4b02      	ldr	r3, [pc, #8]	; (d5ba0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5b96:	681a      	ldr	r2, [r3, #0]
   d5b98:	4b02      	ldr	r3, [pc, #8]	; (d5ba4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5b9a:	601a      	str	r2, [r3, #0]
   d5b9c:	4770      	bx	lr
   d5b9e:	bf00      	nop
   d5ba0:	2003e428 	.word	0x2003e428
   d5ba4:	2003e514 	.word	0x2003e514

000d5ba8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5ba8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5baa:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5bac:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5bae:	b113      	cbz	r3, d5bb6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5bb0:	2203      	movs	r2, #3
   d5bb2:	4601      	mov	r1, r0
   d5bb4:	4798      	blx	r3
    }
   d5bb6:	4620      	mov	r0, r4
   d5bb8:	bd10      	pop	{r4, pc}

000d5bba <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5bba:	b510      	push	{r4, lr}
   d5bbc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5bbe:	f7ff fff3 	bl	d5ba8 <_ZNSt14_Function_baseD1Ev>
   d5bc2:	4620      	mov	r0, r4
   d5bc4:	bd10      	pop	{r4, pc}
	...

000d5bc8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5bc8:	4803      	ldr	r0, [pc, #12]	; (d5bd8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5bca:	4a04      	ldr	r2, [pc, #16]	; (d5bdc <_GLOBAL__sub_I_RGB+0x14>)
   d5bcc:	4904      	ldr	r1, [pc, #16]	; (d5be0 <_GLOBAL__sub_I_RGB+0x18>)
   d5bce:	2300      	movs	r3, #0
   d5bd0:	6083      	str	r3, [r0, #8]
   d5bd2:	f000 bbc1 	b.w	d6358 <__aeabi_atexit>
   d5bd6:	bf00      	nop
   d5bd8:	2003e518 	.word	0x2003e518
   d5bdc:	2003e490 	.word	0x2003e490
   d5be0:	000d5bbb 	.word	0x000d5bbb

000d5be4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5be4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5be6:	4b0c      	ldr	r3, [pc, #48]	; (d5c18 <serialEventRun+0x34>)
   d5be8:	b133      	cbz	r3, d5bf8 <serialEventRun+0x14>
   d5bea:	f000 f957 	bl	d5e9c <_Z16_fetch_usbserialv>
   d5bee:	6803      	ldr	r3, [r0, #0]
   d5bf0:	691b      	ldr	r3, [r3, #16]
   d5bf2:	4798      	blx	r3
   d5bf4:	2800      	cmp	r0, #0
   d5bf6:	dc09      	bgt.n	d5c0c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5bf8:	4b08      	ldr	r3, [pc, #32]	; (d5c1c <serialEventRun+0x38>)
   d5bfa:	b163      	cbz	r3, d5c16 <serialEventRun+0x32>
   d5bfc:	f000 f9cc 	bl	d5f98 <_Z22__fetch_global_Serial1v>
   d5c00:	6803      	ldr	r3, [r0, #0]
   d5c02:	691b      	ldr	r3, [r3, #16]
   d5c04:	4798      	blx	r3
   d5c06:	2800      	cmp	r0, #0
   d5c08:	dc03      	bgt.n	d5c12 <serialEventRun+0x2e>
   d5c0a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5c0c:	f3af 8000 	nop.w
   d5c10:	e7f2      	b.n	d5bf8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5c12:	f3af 8000 	nop.w
   d5c16:	bd08      	pop	{r3, pc}
	...

000d5c20 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5c20:	b508      	push	{r3, lr}
	serialEventRun();
   d5c22:	f7ff ffdf 	bl	d5be4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5c26:	f7fe fc17 	bl	d4458 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5c2a:	4b01      	ldr	r3, [pc, #4]	; (d5c30 <_post_loop+0x10>)
   d5c2c:	6018      	str	r0, [r3, #0]
   d5c2e:	bd08      	pop	{r3, pc}
   d5c30:	2003e74c 	.word	0x2003e74c

000d5c34 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5c34:	4802      	ldr	r0, [pc, #8]	; (d5c40 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5c36:	4a03      	ldr	r2, [pc, #12]	; (d5c44 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5c38:	4903      	ldr	r1, [pc, #12]	; (d5c48 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5c3a:	1a12      	subs	r2, r2, r0
   d5c3c:	f000 bcf9 	b.w	d6632 <memcpy>
   d5c40:	2003f400 	.word	0x2003f400
   d5c44:	2003f404 	.word	0x2003f404
   d5c48:	000d6cd0 	.word	0x000d6cd0

000d5c4c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5c4c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5c4e:	2300      	movs	r3, #0
   d5c50:	9300      	str	r3, [sp, #0]
   d5c52:	461a      	mov	r2, r3
   d5c54:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5c58:	f7fe fd6a 	bl	d4730 <system_ctrl_set_result>
}
   d5c5c:	b003      	add	sp, #12
   d5c5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5c64 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5c64:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5c66:	8843      	ldrh	r3, [r0, #2]
   d5c68:	2b0a      	cmp	r3, #10
   d5c6a:	d008      	beq.n	d5c7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5c6c:	2b50      	cmp	r3, #80	; 0x50
   d5c6e:	d109      	bne.n	d5c84 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5c70:	4b09      	ldr	r3, [pc, #36]	; (d5c98 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5c72:	681b      	ldr	r3, [r3, #0]
   d5c74:	b13b      	cbz	r3, d5c86 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5c76:	b003      	add	sp, #12
   d5c78:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5c7c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5c7e:	f7ff ffe5 	bl	d5c4c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5c82:	e006      	b.n	d5c92 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5c84:	2300      	movs	r3, #0
   d5c86:	9300      	str	r3, [sp, #0]
   d5c88:	461a      	mov	r2, r3
   d5c8a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5c8e:	f7fe fd4f 	bl	d4730 <system_ctrl_set_result>
        break;
    }
}
   d5c92:	b003      	add	sp, #12
   d5c94:	f85d fb04 	ldr.w	pc, [sp], #4
   d5c98:	2003e528 	.word	0x2003e528

000d5c9c <module_user_init_hook>:

void module_user_init_hook()
{
   d5c9c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5c9e:	4c10      	ldr	r4, [pc, #64]	; (d5ce0 <module_user_init_hook+0x44>)
   d5ca0:	4d10      	ldr	r5, [pc, #64]	; (d5ce4 <module_user_init_hook+0x48>)
   d5ca2:	6823      	ldr	r3, [r4, #0]
   d5ca4:	42ab      	cmp	r3, r5
   d5ca6:	4b10      	ldr	r3, [pc, #64]	; (d5ce8 <module_user_init_hook+0x4c>)
   d5ca8:	bf0c      	ite	eq
   d5caa:	2201      	moveq	r2, #1
   d5cac:	2200      	movne	r2, #0
   d5cae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5cb0:	d002      	beq.n	d5cb8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5cb2:	f7ff ffbf 	bl	d5c34 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5cb6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5cb8:	f7fe fbbe 	bl	d4438 <HAL_RNG_GetRandomNumber>
   d5cbc:	4604      	mov	r4, r0
    srand(seed);
   d5cbe:	f000 fce7 	bl	d6690 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5cc2:	4b0a      	ldr	r3, [pc, #40]	; (d5cec <module_user_init_hook+0x50>)
   d5cc4:	b113      	cbz	r3, d5ccc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5cc6:	4620      	mov	r0, r4
   d5cc8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5ccc:	2100      	movs	r1, #0
   d5cce:	4807      	ldr	r0, [pc, #28]	; (d5cec <module_user_init_hook+0x50>)
   d5cd0:	f7fe fd88 	bl	d47e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5cd4:	2100      	movs	r1, #0
   d5cd6:	4806      	ldr	r0, [pc, #24]	; (d5cf0 <module_user_init_hook+0x54>)
}
   d5cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5cdc:	f7fe bd1e 	b.w	d471c <system_ctrl_set_app_request_handler>
   d5ce0:	2003f400 	.word	0x2003f400
   d5ce4:	9a271c1e 	.word	0x9a271c1e
   d5ce8:	2003e52c 	.word	0x2003e52c
   d5cec:	00000000 	.word	0x00000000
   d5cf0:	000d5c65 	.word	0x000d5c65

000d5cf4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5cf4:	4770      	bx	lr

000d5cf6 <_ZN9IPAddressD0Ev>:
   d5cf6:	b510      	push	{r4, lr}
   d5cf8:	2118      	movs	r1, #24
   d5cfa:	4604      	mov	r4, r0
   d5cfc:	f000 fb31 	bl	d6362 <_ZdlPvj>
   d5d00:	4620      	mov	r0, r4
   d5d02:	bd10      	pop	{r4, pc}

000d5d04 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5d04:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5d06:	7d03      	ldrb	r3, [r0, #20]
   d5d08:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5d0a:	b08d      	sub	sp, #52	; 0x34
   d5d0c:	460e      	mov	r6, r1
   d5d0e:	f100 0704 	add.w	r7, r0, #4
   d5d12:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5d16:	d002      	beq.n	d5d1e <_ZNK9IPAddress7printToER5Print+0x1a>
   d5d18:	f100 0508 	add.w	r5, r0, #8
   d5d1c:	e018      	b.n	d5d50 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5d1e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5d20:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5d22:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5d26:	232f      	movs	r3, #47	; 0x2f
   d5d28:	462a      	mov	r2, r5
   d5d2a:	200a      	movs	r0, #10
   d5d2c:	f7fe fc5e 	bl	d45ec <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5d30:	4628      	mov	r0, r5
   d5d32:	f000 fcd5 	bl	d66e0 <strlen>
   d5d36:	6833      	ldr	r3, [r6, #0]
   d5d38:	4602      	mov	r2, r0
   d5d3a:	68db      	ldr	r3, [r3, #12]
   d5d3c:	4629      	mov	r1, r5
   d5d3e:	4630      	mov	r0, r6
   d5d40:	4798      	blx	r3
   d5d42:	e00f      	b.n	d5d64 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5d44:	b124      	cbz	r4, d5d50 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5d46:	212e      	movs	r1, #46	; 0x2e
   d5d48:	4630      	mov	r0, r6
   d5d4a:	f7ff fef7 	bl	d5b3c <_ZN5Print5printEc>
   d5d4e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5d50:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5d54:	220a      	movs	r2, #10
   d5d56:	4630      	mov	r0, r6
   d5d58:	f7ff fef3 	bl	d5b42 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5d5c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5d5e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5d60:	d1f0      	bne.n	d5d44 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5d62:	4620      	mov	r0, r4
    }
    return n;
}
   d5d64:	b00d      	add	sp, #52	; 0x34
   d5d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5d68 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5d68:	b510      	push	{r4, lr}
   d5d6a:	4b05      	ldr	r3, [pc, #20]	; (d5d80 <_ZN9IPAddressC1Ev+0x18>)
   d5d6c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5d6e:	2211      	movs	r2, #17
   d5d70:	f840 3b04 	str.w	r3, [r0], #4
   d5d74:	2100      	movs	r1, #0
   d5d76:	f000 fc82 	bl	d667e <memset>
{
    clear();
}
   d5d7a:	4620      	mov	r0, r4
   d5d7c:	bd10      	pop	{r4, pc}
   d5d7e:	bf00      	nop
   d5d80:	000d6b24 	.word	0x000d6b24

000d5d84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5d84:	4603      	mov	r3, r0
   d5d86:	4a07      	ldr	r2, [pc, #28]	; (d5da4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5d88:	b510      	push	{r4, lr}
   d5d8a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5d8e:	f101 0210 	add.w	r2, r1, #16
   d5d92:	f851 4b04 	ldr.w	r4, [r1], #4
   d5d96:	f843 4b04 	str.w	r4, [r3], #4
   d5d9a:	4291      	cmp	r1, r2
   d5d9c:	d1f9      	bne.n	d5d92 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5d9e:	780a      	ldrb	r2, [r1, #0]
   d5da0:	701a      	strb	r2, [r3, #0]
}
   d5da2:	bd10      	pop	{r4, pc}
   d5da4:	000d6b24 	.word	0x000d6b24

000d5da8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5da8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5daa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5dae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5db2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5db6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5dba:	2304      	movs	r3, #4
   d5dbc:	6041      	str	r1, [r0, #4]
   d5dbe:	7503      	strb	r3, [r0, #20]
   d5dc0:	bd10      	pop	{r4, pc}

000d5dc2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5dc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5dc4:	780d      	ldrb	r5, [r1, #0]
   d5dc6:	788b      	ldrb	r3, [r1, #2]
   d5dc8:	784a      	ldrb	r2, [r1, #1]
   d5dca:	78c9      	ldrb	r1, [r1, #3]
   d5dcc:	9100      	str	r1, [sp, #0]
   d5dce:	4629      	mov	r1, r5
   d5dd0:	f7ff ffea 	bl	d5da8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5dd4:	b003      	add	sp, #12
   d5dd6:	bd30      	pop	{r4, r5, pc}

000d5dd8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5dd8:	7441      	strb	r1, [r0, #17]
   d5dda:	4770      	bx	lr

000d5ddc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5ddc:	4770      	bx	lr

000d5dde <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5dde:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5de0:	2100      	movs	r1, #0
   d5de2:	7c00      	ldrb	r0, [r0, #16]
   d5de4:	f7fe fc62 	bl	d46ac <HAL_USB_USART_Receive_Data>
}
   d5de8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5dec:	bf28      	it	cs
   d5dee:	f04f 30ff 	movcs.w	r0, #4294967295
   d5df2:	bd08      	pop	{r3, pc}

000d5df4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5df4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5df6:	2101      	movs	r1, #1
   d5df8:	7c00      	ldrb	r0, [r0, #16]
   d5dfa:	f7fe fc57 	bl	d46ac <HAL_USB_USART_Receive_Data>
}
   d5dfe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5e02:	bf28      	it	cs
   d5e04:	f04f 30ff 	movcs.w	r0, #4294967295
   d5e08:	bd08      	pop	{r3, pc}

000d5e0a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5e0a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5e0c:	7c00      	ldrb	r0, [r0, #16]
   d5e0e:	f7fe fc45 	bl	d469c <HAL_USB_USART_Available_Data_For_Write>
}
   d5e12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e16:	bd08      	pop	{r3, pc}

000d5e18 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5e18:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5e1a:	7c00      	ldrb	r0, [r0, #16]
   d5e1c:	f7fe fc36 	bl	d468c <HAL_USB_USART_Available_Data>
}
   d5e20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e24:	bd08      	pop	{r3, pc}

000d5e26 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5e26:	7c00      	ldrb	r0, [r0, #16]
   d5e28:	f7fe bc50 	b.w	d46cc <HAL_USB_USART_Flush_Data>

000d5e2c <_ZN9USBSerialD0Ev>:
   d5e2c:	b510      	push	{r4, lr}
   d5e2e:	2114      	movs	r1, #20
   d5e30:	4604      	mov	r4, r0
   d5e32:	f000 fa96 	bl	d6362 <_ZdlPvj>
   d5e36:	4620      	mov	r0, r4
   d5e38:	bd10      	pop	{r4, pc}

000d5e3a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5e3a:	b538      	push	{r3, r4, r5, lr}
   d5e3c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5e3e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5e40:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5e42:	f7fe fc2b 	bl	d469c <HAL_USB_USART_Available_Data_For_Write>
   d5e46:	2800      	cmp	r0, #0
   d5e48:	dc01      	bgt.n	d5e4e <_ZN9USBSerial5writeEh+0x14>
   d5e4a:	7c60      	ldrb	r0, [r4, #17]
   d5e4c:	b128      	cbz	r0, d5e5a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5e4e:	4629      	mov	r1, r5
   d5e50:	7c20      	ldrb	r0, [r4, #16]
   d5e52:	f7fe fc33 	bl	d46bc <HAL_USB_USART_Send_Data>
   d5e56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5e5a:	bd38      	pop	{r3, r4, r5, pc}

000d5e5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5e5c:	b510      	push	{r4, lr}
   d5e5e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5e60:	2300      	movs	r3, #0
   d5e62:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e68:	60a3      	str	r3, [r4, #8]
   d5e6a:	4b05      	ldr	r3, [pc, #20]	; (d5e80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5e6c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5e6e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5e70:	4608      	mov	r0, r1
{
  _serial = serial;
   d5e72:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5e74:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5e76:	4611      	mov	r1, r2
   d5e78:	f7fe fbf8 	bl	d466c <HAL_USB_USART_Init>
}
   d5e7c:	4620      	mov	r0, r4
   d5e7e:	bd10      	pop	{r4, pc}
   d5e80:	000d6b38 	.word	0x000d6b38

000d5e84 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5e84:	2200      	movs	r2, #0
   d5e86:	7c00      	ldrb	r0, [r0, #16]
   d5e88:	f7fe bbf8 	b.w	d467c <HAL_USB_USART_Begin>

000d5e8c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5e8c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5e8e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5e90:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5e92:	2100      	movs	r1, #0
   d5e94:	f000 fbf3 	bl	d667e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5e98:	4620      	mov	r0, r4
   d5e9a:	bd10      	pop	{r4, pc}

000d5e9c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5e9c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5e9e:	4d0e      	ldr	r5, [pc, #56]	; (d5ed8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5ea0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5ea2:	a801      	add	r0, sp, #4
   d5ea4:	f7ff fff2 	bl	d5e8c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5ea8:	6829      	ldr	r1, [r5, #0]
   d5eaa:	f011 0401 	ands.w	r4, r1, #1
   d5eae:	d110      	bne.n	d5ed2 <_Z16_fetch_usbserialv+0x36>
   d5eb0:	4628      	mov	r0, r5
   d5eb2:	f7fe f8f6 	bl	d40a2 <__cxa_guard_acquire>
   d5eb6:	b160      	cbz	r0, d5ed2 <_Z16_fetch_usbserialv+0x36>
   d5eb8:	aa01      	add	r2, sp, #4
   d5eba:	4621      	mov	r1, r4
   d5ebc:	4807      	ldr	r0, [pc, #28]	; (d5edc <_Z16_fetch_usbserialv+0x40>)
   d5ebe:	f7ff ffcd 	bl	d5e5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5ec2:	4628      	mov	r0, r5
   d5ec4:	f7fe f8f2 	bl	d40ac <__cxa_guard_release>
   d5ec8:	4a05      	ldr	r2, [pc, #20]	; (d5ee0 <_Z16_fetch_usbserialv+0x44>)
   d5eca:	4906      	ldr	r1, [pc, #24]	; (d5ee4 <_Z16_fetch_usbserialv+0x48>)
   d5ecc:	4803      	ldr	r0, [pc, #12]	; (d5edc <_Z16_fetch_usbserialv+0x40>)
   d5ece:	f000 fa43 	bl	d6358 <__aeabi_atexit>
	return _usbserial;
}
   d5ed2:	4802      	ldr	r0, [pc, #8]	; (d5edc <_Z16_fetch_usbserialv+0x40>)
   d5ed4:	b007      	add	sp, #28
   d5ed6:	bd30      	pop	{r4, r5, pc}
   d5ed8:	2003e530 	.word	0x2003e530
   d5edc:	2003e534 	.word	0x2003e534
   d5ee0:	2003e490 	.word	0x2003e490
   d5ee4:	000d5ddd 	.word	0x000d5ddd

000d5ee8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5ee8:	4770      	bx	lr

000d5eea <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5eea:	7441      	strb	r1, [r0, #17]
   d5eec:	4770      	bx	lr

000d5eee <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5eee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5ef0:	7c00      	ldrb	r0, [r0, #16]
   d5ef2:	f7fe fbb3 	bl	d465c <HAL_USART_Available_Data_For_Write>
}
   d5ef6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5efa:	bd08      	pop	{r3, pc}

000d5efc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5efc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5efe:	7c00      	ldrb	r0, [r0, #16]
   d5f00:	f7fe fb8c 	bl	d461c <HAL_USART_Available_Data>
}
   d5f04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f08:	bd08      	pop	{r3, pc}

000d5f0a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5f0a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5f0c:	7c00      	ldrb	r0, [r0, #16]
   d5f0e:	f7fe fb95 	bl	d463c <HAL_USART_Peek_Data>
}
   d5f12:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5f16:	bf28      	it	cs
   d5f18:	f04f 30ff 	movcs.w	r0, #4294967295
   d5f1c:	bd08      	pop	{r3, pc}

000d5f1e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5f1e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5f20:	7c00      	ldrb	r0, [r0, #16]
   d5f22:	f7fe fb83 	bl	d462c <HAL_USART_Read_Data>
}
   d5f26:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5f2a:	bf28      	it	cs
   d5f2c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5f30:	bd08      	pop	{r3, pc}

000d5f32 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5f32:	7c00      	ldrb	r0, [r0, #16]
   d5f34:	f7fe bb8a 	b.w	d464c <HAL_USART_Flush_Data>

000d5f38 <_ZN11USARTSerialD0Ev>:
   d5f38:	b510      	push	{r4, lr}
   d5f3a:	2114      	movs	r1, #20
   d5f3c:	4604      	mov	r4, r0
   d5f3e:	f000 fa10 	bl	d6362 <_ZdlPvj>
   d5f42:	4620      	mov	r0, r4
   d5f44:	bd10      	pop	{r4, pc}

000d5f46 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5f46:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5f48:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5f4a:	4604      	mov	r4, r0
   d5f4c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5f4e:	b925      	cbnz	r5, d5f5a <_ZN11USARTSerial5writeEh+0x14>
   d5f50:	7c00      	ldrb	r0, [r0, #16]
   d5f52:	f7fe fb83 	bl	d465c <HAL_USART_Available_Data_For_Write>
   d5f56:	2800      	cmp	r0, #0
   d5f58:	dd05      	ble.n	d5f66 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5f5a:	4631      	mov	r1, r6
   d5f5c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5f5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5f62:	f7fe bb53 	b.w	d460c <HAL_USART_Write_Data>
  }
  return 0;
}
   d5f66:	4628      	mov	r0, r5
   d5f68:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5f6c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5f6c:	b510      	push	{r4, lr}
   d5f6e:	4604      	mov	r4, r0
   d5f70:	4608      	mov	r0, r1
   d5f72:	4611      	mov	r1, r2
   d5f74:	2200      	movs	r2, #0
   d5f76:	6062      	str	r2, [r4, #4]
   d5f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5f7c:	60a2      	str	r2, [r4, #8]
   d5f7e:	4a05      	ldr	r2, [pc, #20]	; (d5f94 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5f80:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5f82:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5f84:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5f86:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5f88:	461a      	mov	r2, r3
   d5f8a:	f7fe fb37 	bl	d45fc <HAL_USART_Init>
}
   d5f8e:	4620      	mov	r0, r4
   d5f90:	bd10      	pop	{r4, pc}
   d5f92:	bf00      	nop
   d5f94:	000d6b68 	.word	0x000d6b68

000d5f98 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d5f9a:	4c19      	ldr	r4, [pc, #100]	; (d6000 <_Z22__fetch_global_Serial1v+0x68>)
   d5f9c:	6825      	ldr	r5, [r4, #0]
   d5f9e:	b94d      	cbnz	r5, d5fb4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d5fa0:	2084      	movs	r0, #132	; 0x84
   d5fa2:	f7fe f878 	bl	d4096 <_Znwj>
   d5fa6:	4606      	mov	r6, r0
   d5fa8:	b118      	cbz	r0, d5fb2 <_Z22__fetch_global_Serial1v+0x1a>
   d5faa:	2284      	movs	r2, #132	; 0x84
   d5fac:	4629      	mov	r1, r5
   d5fae:	f000 fb66 	bl	d667e <memset>
   d5fb2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5fb4:	4d13      	ldr	r5, [pc, #76]	; (d6004 <_Z22__fetch_global_Serial1v+0x6c>)
   d5fb6:	682e      	ldr	r6, [r5, #0]
   d5fb8:	b94e      	cbnz	r6, d5fce <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d5fba:	2084      	movs	r0, #132	; 0x84
   d5fbc:	f7fe f86b 	bl	d4096 <_Znwj>
   d5fc0:	4607      	mov	r7, r0
   d5fc2:	b118      	cbz	r0, d5fcc <_Z22__fetch_global_Serial1v+0x34>
   d5fc4:	2284      	movs	r2, #132	; 0x84
   d5fc6:	4631      	mov	r1, r6
   d5fc8:	f000 fb59 	bl	d667e <memset>
   d5fcc:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d5fce:	4f0e      	ldr	r7, [pc, #56]	; (d6008 <_Z22__fetch_global_Serial1v+0x70>)
   d5fd0:	6839      	ldr	r1, [r7, #0]
   d5fd2:	f011 0601 	ands.w	r6, r1, #1
   d5fd6:	d111      	bne.n	d5ffc <_Z22__fetch_global_Serial1v+0x64>
   d5fd8:	4638      	mov	r0, r7
   d5fda:	f7fe f862 	bl	d40a2 <__cxa_guard_acquire>
   d5fde:	b168      	cbz	r0, d5ffc <_Z22__fetch_global_Serial1v+0x64>
   d5fe0:	6822      	ldr	r2, [r4, #0]
   d5fe2:	682b      	ldr	r3, [r5, #0]
   d5fe4:	4809      	ldr	r0, [pc, #36]	; (d600c <_Z22__fetch_global_Serial1v+0x74>)
   d5fe6:	4631      	mov	r1, r6
   d5fe8:	f7ff ffc0 	bl	d5f6c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5fec:	4638      	mov	r0, r7
   d5fee:	f7fe f85d 	bl	d40ac <__cxa_guard_release>
   d5ff2:	4a07      	ldr	r2, [pc, #28]	; (d6010 <_Z22__fetch_global_Serial1v+0x78>)
   d5ff4:	4907      	ldr	r1, [pc, #28]	; (d6014 <_Z22__fetch_global_Serial1v+0x7c>)
   d5ff6:	4805      	ldr	r0, [pc, #20]	; (d600c <_Z22__fetch_global_Serial1v+0x74>)
   d5ff8:	f000 f9ae 	bl	d6358 <__aeabi_atexit>
#endif
	return serial1;
}
   d5ffc:	4803      	ldr	r0, [pc, #12]	; (d600c <_Z22__fetch_global_Serial1v+0x74>)
   d5ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6000:	2003e564 	.word	0x2003e564
   d6004:	2003e55c 	.word	0x2003e55c
   d6008:	2003e560 	.word	0x2003e560
   d600c:	2003e548 	.word	0x2003e548
   d6010:	2003e490 	.word	0x2003e490
   d6014:	000d5ee9 	.word	0x000d5ee9

000d6018 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6018:	2200      	movs	r2, #0
   d601a:	4611      	mov	r1, r2
   d601c:	6840      	ldr	r0, [r0, #4]
   d601e:	f7fe bbc9 	b.w	d47b4 <network_listening>

000d6022 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6022:	2200      	movs	r2, #0
   d6024:	4611      	mov	r1, r2
   d6026:	6840      	ldr	r0, [r0, #4]
   d6028:	f7fe bbd4 	b.w	d47d4 <network_get_listen_timeout>

000d602c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d602c:	2200      	movs	r2, #0
   d602e:	6840      	ldr	r0, [r0, #4]
   d6030:	f7fe bbc8 	b.w	d47c4 <network_set_listen_timeout>

000d6034 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6034:	2200      	movs	r2, #0
   d6036:	f081 0101 	eor.w	r1, r1, #1
   d603a:	6840      	ldr	r0, [r0, #4]
   d603c:	f7fe bbb2 	b.w	d47a4 <network_listen>

000d6040 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6040:	2300      	movs	r3, #0
   d6042:	461a      	mov	r2, r3
   d6044:	2101      	movs	r1, #1
   d6046:	6840      	ldr	r0, [r0, #4]
   d6048:	f7fe bba4 	b.w	d4794 <network_off>

000d604c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d604c:	2300      	movs	r3, #0
   d604e:	461a      	mov	r2, r3
   d6050:	4619      	mov	r1, r3
   d6052:	6840      	ldr	r0, [r0, #4]
   d6054:	f7fe bb96 	b.w	d4784 <network_on>

000d6058 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6058:	2200      	movs	r2, #0
   d605a:	4611      	mov	r1, r2
   d605c:	6840      	ldr	r0, [r0, #4]
   d605e:	f7fe bb89 	b.w	d4774 <network_ready>

000d6062 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6062:	2200      	movs	r2, #0
   d6064:	4611      	mov	r1, r2
   d6066:	6840      	ldr	r0, [r0, #4]
   d6068:	f7fe bb74 	b.w	d4754 <network_connecting>

000d606c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d606c:	2200      	movs	r2, #0
   d606e:	2102      	movs	r1, #2
   d6070:	6840      	ldr	r0, [r0, #4]
   d6072:	f7fe bb77 	b.w	d4764 <network_disconnect>

000d6076 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6076:	2300      	movs	r3, #0
   d6078:	461a      	mov	r2, r3
   d607a:	6840      	ldr	r0, [r0, #4]
   d607c:	f7fe bb62 	b.w	d4744 <network_connect>

000d6080 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6080:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6082:	4605      	mov	r5, r0
   d6084:	b188      	cbz	r0, d60aa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6086:	6804      	ldr	r4, [r0, #0]
   d6088:	b14c      	cbz	r4, d609e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d608a:	68a3      	ldr	r3, [r4, #8]
   d608c:	b11b      	cbz	r3, d6096 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d608e:	2203      	movs	r2, #3
   d6090:	4621      	mov	r1, r4
   d6092:	4620      	mov	r0, r4
   d6094:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6096:	2110      	movs	r1, #16
   d6098:	4620      	mov	r0, r4
   d609a:	f000 f962 	bl	d6362 <_ZdlPvj>
   d609e:	4628      	mov	r0, r5
   d60a0:	2114      	movs	r1, #20
      }
   d60a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d60a6:	f000 b95c 	b.w	d6362 <_ZdlPvj>
   d60aa:	bd38      	pop	{r3, r4, r5, pc}

000d60ac <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d60ac:	b110      	cbz	r0, d60b4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d60ae:	6803      	ldr	r3, [r0, #0]
   d60b0:	685b      	ldr	r3, [r3, #4]
   d60b2:	4718      	bx	r3
   d60b4:	4770      	bx	lr

000d60b6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d60b6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d60b8:	6803      	ldr	r3, [r0, #0]
   d60ba:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d60bc:	b1bb      	cbz	r3, d60ee <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d60be:	6858      	ldr	r0, [r3, #4]
   d60c0:	f7fe fa5c 	bl	d457c <os_thread_is_current>
   d60c4:	b978      	cbnz	r0, d60e6 <_ZN6ThreadD1Ev+0x30>
   d60c6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d60c8:	7c5a      	ldrb	r2, [r3, #17]
   d60ca:	b912      	cbnz	r2, d60d2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d60cc:	6858      	ldr	r0, [r3, #4]
   d60ce:	f7fe fa5d 	bl	d458c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d60d2:	6823      	ldr	r3, [r4, #0]
   d60d4:	6858      	ldr	r0, [r3, #4]
   d60d6:	f7fe fa61 	bl	d459c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d60da:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d60dc:	2300      	movs	r3, #0
   d60de:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d60e0:	b128      	cbz	r0, d60ee <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d60e2:	f7ff ffcd 	bl	d6080 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d60e6:	6820      	ldr	r0, [r4, #0]
   d60e8:	b108      	cbz	r0, d60ee <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d60ea:	f7ff ffc9 	bl	d6080 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d60ee:	4620      	mov	r0, r4
   d60f0:	bd10      	pop	{r4, pc}

000d60f2 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d60f2:	b538      	push	{r3, r4, r5, lr}
   d60f4:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d60f6:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d60fa:	b108      	cbz	r0, d6100 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d60fc:	f7fd ffcf 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6100:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6104:	b108      	cbz	r0, d610a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6106:	f7fe fa59 	bl	d45bc <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d610a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d610e:	b135      	cbz	r5, d611e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6110:	4628      	mov	r0, r5
   d6112:	f7ff ffd0 	bl	d60b6 <_ZN6ThreadD1Ev>
   d6116:	2104      	movs	r1, #4
   d6118:	4628      	mov	r0, r5
   d611a:	f000 f922 	bl	d6362 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d611e:	6820      	ldr	r0, [r4, #0]
   d6120:	b108      	cbz	r0, d6126 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6122:	f7ff ffc3 	bl	d60ac <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6126:	4620      	mov	r0, r4
   d6128:	bd38      	pop	{r3, r4, r5, pc}
	...

000d612c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d612c:	b510      	push	{r4, lr}
   d612e:	4b04      	ldr	r3, [pc, #16]	; (d6140 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6130:	4604      	mov	r4, r0
   d6132:	f840 3b08 	str.w	r3, [r0], #8
   d6136:	f7ff ffdc 	bl	d60f2 <_ZN5spark11MeshPublishD1Ev>
   d613a:	4620      	mov	r0, r4
   d613c:	bd10      	pop	{r4, pc}
   d613e:	bf00      	nop
   d6140:	000d6b98 	.word	0x000d6b98

000d6144 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6144:	b538      	push	{r3, r4, r5, lr}
   d6146:	4c0e      	ldr	r4, [pc, #56]	; (d6180 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6148:	4b0e      	ldr	r3, [pc, #56]	; (d6184 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d614a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d614c:	2500      	movs	r5, #0
   d614e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6150:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6154:	6063      	str	r3, [r4, #4]
   d6156:	60a5      	str	r5, [r4, #8]
   d6158:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d615c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6160:	f7fe fa24 	bl	d45ac <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6164:	4b08      	ldr	r3, [pc, #32]	; (d6188 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6166:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d616a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d616e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6170:	4620      	mov	r0, r4
   d6172:	4a06      	ldr	r2, [pc, #24]	; (d618c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6174:	4906      	ldr	r1, [pc, #24]	; (d6190 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d617a:	f000 b8ed 	b.w	d6358 <__aeabi_atexit>
   d617e:	bf00      	nop
   d6180:	2003e568 	.word	0x2003e568
   d6184:	000d6c00 	.word	0x000d6c00
   d6188:	000d6b98 	.word	0x000d6b98
   d618c:	2003e490 	.word	0x2003e490
   d6190:	000d612d 	.word	0x000d612d

000d6194 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6194:	2200      	movs	r2, #0
   d6196:	4611      	mov	r1, r2
   d6198:	6840      	ldr	r0, [r0, #4]
   d619a:	f7fe baeb 	b.w	d4774 <network_ready>

000d619e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d619e:	2200      	movs	r2, #0
   d61a0:	4611      	mov	r1, r2
   d61a2:	6840      	ldr	r0, [r0, #4]
   d61a4:	f7fe bb06 	b.w	d47b4 <network_listening>

000d61a8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d61a8:	2200      	movs	r2, #0
   d61aa:	4611      	mov	r1, r2
   d61ac:	6840      	ldr	r0, [r0, #4]
   d61ae:	f7fe bb11 	b.w	d47d4 <network_get_listen_timeout>

000d61b2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d61b2:	2200      	movs	r2, #0
   d61b4:	6840      	ldr	r0, [r0, #4]
   d61b6:	f7fe bb05 	b.w	d47c4 <network_set_listen_timeout>

000d61ba <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d61ba:	2200      	movs	r2, #0
   d61bc:	f081 0101 	eor.w	r1, r1, #1
   d61c0:	6840      	ldr	r0, [r0, #4]
   d61c2:	f7fe baef 	b.w	d47a4 <network_listen>

000d61c6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d61c6:	2300      	movs	r3, #0
   d61c8:	461a      	mov	r2, r3
   d61ca:	4619      	mov	r1, r3
   d61cc:	6840      	ldr	r0, [r0, #4]
   d61ce:	f7fe bae1 	b.w	d4794 <network_off>

000d61d2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d61d2:	2300      	movs	r3, #0
   d61d4:	461a      	mov	r2, r3
   d61d6:	4619      	mov	r1, r3
   d61d8:	6840      	ldr	r0, [r0, #4]
   d61da:	f7fe bad3 	b.w	d4784 <network_on>

000d61de <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d61de:	2200      	movs	r2, #0
   d61e0:	4611      	mov	r1, r2
   d61e2:	6840      	ldr	r0, [r0, #4]
   d61e4:	f7fe bab6 	b.w	d4754 <network_connecting>

000d61e8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d61e8:	2200      	movs	r2, #0
   d61ea:	2102      	movs	r1, #2
   d61ec:	6840      	ldr	r0, [r0, #4]
   d61ee:	f7fe bab9 	b.w	d4764 <network_disconnect>

000d61f2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d61f2:	2300      	movs	r3, #0
   d61f4:	461a      	mov	r2, r3
   d61f6:	6840      	ldr	r0, [r0, #4]
   d61f8:	f7fe baa4 	b.w	d4744 <network_connect>

000d61fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d61fc:	4b02      	ldr	r3, [pc, #8]	; (d6208 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d61fe:	2204      	movs	r2, #4
   d6200:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6202:	4a02      	ldr	r2, [pc, #8]	; (d620c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6204:	601a      	str	r2, [r3, #0]
   d6206:	4770      	bx	lr
   d6208:	2003e73c 	.word	0x2003e73c
   d620c:	000d6bcc 	.word	0x000d6bcc

000d6210 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6210:	2300      	movs	r3, #0
   d6212:	461a      	mov	r2, r3
   d6214:	6840      	ldr	r0, [r0, #4]
   d6216:	f7fe ba95 	b.w	d4744 <network_connect>

000d621a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d621a:	2200      	movs	r2, #0
   d621c:	2102      	movs	r1, #2
   d621e:	6840      	ldr	r0, [r0, #4]
   d6220:	f7fe baa0 	b.w	d4764 <network_disconnect>

000d6224 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6224:	2200      	movs	r2, #0
   d6226:	4611      	mov	r1, r2
   d6228:	6840      	ldr	r0, [r0, #4]
   d622a:	f7fe ba93 	b.w	d4754 <network_connecting>

000d622e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d622e:	2200      	movs	r2, #0
   d6230:	4611      	mov	r1, r2
   d6232:	6840      	ldr	r0, [r0, #4]
   d6234:	f7fe ba9e 	b.w	d4774 <network_ready>

000d6238 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6238:	2300      	movs	r3, #0
   d623a:	461a      	mov	r2, r3
   d623c:	4619      	mov	r1, r3
   d623e:	6840      	ldr	r0, [r0, #4]
   d6240:	f7fe baa0 	b.w	d4784 <network_on>

000d6244 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6244:	2300      	movs	r3, #0
   d6246:	461a      	mov	r2, r3
   d6248:	4619      	mov	r1, r3
   d624a:	6840      	ldr	r0, [r0, #4]
   d624c:	f7fe baa2 	b.w	d4794 <network_off>

000d6250 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6250:	2200      	movs	r2, #0
   d6252:	f081 0101 	eor.w	r1, r1, #1
   d6256:	6840      	ldr	r0, [r0, #4]
   d6258:	f7fe baa4 	b.w	d47a4 <network_listen>

000d625c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d625c:	2200      	movs	r2, #0
   d625e:	6840      	ldr	r0, [r0, #4]
   d6260:	f7fe bab0 	b.w	d47c4 <network_set_listen_timeout>

000d6264 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6264:	2200      	movs	r2, #0
   d6266:	4611      	mov	r1, r2
   d6268:	6840      	ldr	r0, [r0, #4]
   d626a:	f7fe bab3 	b.w	d47d4 <network_get_listen_timeout>

000d626e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d626e:	2200      	movs	r2, #0
   d6270:	4611      	mov	r1, r2
   d6272:	6840      	ldr	r0, [r0, #4]
   d6274:	f7fe ba9e 	b.w	d47b4 <network_listening>

000d6278 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d627c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d627e:	b095      	sub	sp, #84	; 0x54
   d6280:	4616      	mov	r6, r2
   d6282:	460d      	mov	r5, r1
   d6284:	4607      	mov	r7, r0
    IPAddress addr;
   d6286:	f7ff fd6f 	bl	d5d68 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d628a:	4621      	mov	r1, r4
   d628c:	2220      	movs	r2, #32
   d628e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6290:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6292:	f000 f9f4 	bl	d667e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6296:	2340      	movs	r3, #64	; 0x40
   d6298:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d629a:	4621      	mov	r1, r4
   d629c:	466b      	mov	r3, sp
   d629e:	aa0c      	add	r2, sp, #48	; 0x30
   d62a0:	4630      	mov	r0, r6
   d62a2:	f7fe f8b9 	bl	d4418 <netdb_getaddrinfo>
    if (!r) {
   d62a6:	4604      	mov	r4, r0
   d62a8:	2800      	cmp	r0, #0
   d62aa:	d144      	bne.n	d6336 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d62ac:	4602      	mov	r2, r0
   d62ae:	2101      	movs	r1, #1
   d62b0:	6868      	ldr	r0, [r5, #4]
   d62b2:	f7fe fa5f 	bl	d4774 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62b6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d62b8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62ba:	4622      	mov	r2, r4
   d62bc:	6868      	ldr	r0, [r5, #4]
   d62be:	f7fe fa59 	bl	d4774 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62c2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62c4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d62c6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62c8:	2e00      	cmp	r6, #0
   d62ca:	d034      	beq.n	d6336 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d62cc:	2900      	cmp	r1, #0
   d62ce:	d132      	bne.n	d6336 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d62d0:	6873      	ldr	r3, [r6, #4]
   d62d2:	2b02      	cmp	r3, #2
   d62d4:	d002      	beq.n	d62dc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d62d6:	2b0a      	cmp	r3, #10
   d62d8:	d009      	beq.n	d62ee <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d62da:	e02a      	b.n	d6332 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d62dc:	f1b8 0f00 	cmp.w	r8, #0
   d62e0:	d027      	beq.n	d6332 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d62e2:	6971      	ldr	r1, [r6, #20]
   d62e4:	4638      	mov	r0, r7
   d62e6:	3104      	adds	r1, #4
   d62e8:	f7ff fd6b 	bl	d5dc2 <_ZN9IPAddressaSEPKh>
   d62ec:	e020      	b.n	d6330 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d62ee:	f1b9 0f00 	cmp.w	r9, #0
   d62f2:	d01e      	beq.n	d6332 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d62f4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d62f6:	2211      	movs	r2, #17
   d62f8:	a801      	add	r0, sp, #4
   d62fa:	f000 f9c0 	bl	d667e <memset>
                    a.v = 6;
   d62fe:	2306      	movs	r3, #6
   d6300:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6304:	ad01      	add	r5, sp, #4
   d6306:	f104 0308 	add.w	r3, r4, #8
   d630a:	3418      	adds	r4, #24
   d630c:	6818      	ldr	r0, [r3, #0]
   d630e:	6859      	ldr	r1, [r3, #4]
   d6310:	462a      	mov	r2, r5
   d6312:	c203      	stmia	r2!, {r0, r1}
   d6314:	3308      	adds	r3, #8
   d6316:	42a3      	cmp	r3, r4
   d6318:	4615      	mov	r5, r2
   d631a:	d1f7      	bne.n	d630c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d631c:	a901      	add	r1, sp, #4
   d631e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6320:	ad07      	add	r5, sp, #28
   d6322:	f7ff fd2f 	bl	d5d84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6328:	1d3c      	adds	r4, r7, #4
   d632a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d632c:	682b      	ldr	r3, [r5, #0]
   d632e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6330:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6332:	69f6      	ldr	r6, [r6, #28]
   d6334:	e7c8      	b.n	d62c8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6336:	9800      	ldr	r0, [sp, #0]
   d6338:	f7fe f866 	bl	d4408 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d633c:	4638      	mov	r0, r7
   d633e:	b015      	add	sp, #84	; 0x54
   d6340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6344 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6344:	4b02      	ldr	r3, [pc, #8]	; (d6350 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6346:	4a03      	ldr	r2, [pc, #12]	; (d6354 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6348:	601a      	str	r2, [r3, #0]
   d634a:	2200      	movs	r2, #0
   d634c:	605a      	str	r2, [r3, #4]
   d634e:	4770      	bx	lr
   d6350:	2003e744 	.word	0x2003e744
   d6354:	000d6c00 	.word	0x000d6c00

000d6358 <__aeabi_atexit>:
   d6358:	460b      	mov	r3, r1
   d635a:	4601      	mov	r1, r0
   d635c:	4618      	mov	r0, r3
   d635e:	f000 b94b 	b.w	d65f8 <__cxa_atexit>

000d6362 <_ZdlPvj>:
   d6362:	f7fd be9a 	b.w	d409a <_ZdlPv>
	...

000d6368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6368:	4b18      	ldr	r3, [pc, #96]	; (d63cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d636a:	681a      	ldr	r2, [r3, #0]
   d636c:	07d1      	lsls	r1, r2, #31
   d636e:	bf5c      	itt	pl
   d6370:	2201      	movpl	r2, #1
   d6372:	601a      	strpl	r2, [r3, #0]
   d6374:	4b16      	ldr	r3, [pc, #88]	; (d63d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6376:	681a      	ldr	r2, [r3, #0]
   d6378:	07d2      	lsls	r2, r2, #31
   d637a:	bf5c      	itt	pl
   d637c:	2201      	movpl	r2, #1
   d637e:	601a      	strpl	r2, [r3, #0]
   d6380:	4b14      	ldr	r3, [pc, #80]	; (d63d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6382:	681a      	ldr	r2, [r3, #0]
   d6384:	07d0      	lsls	r0, r2, #31
   d6386:	bf5c      	itt	pl
   d6388:	2201      	movpl	r2, #1
   d638a:	601a      	strpl	r2, [r3, #0]
   d638c:	4b12      	ldr	r3, [pc, #72]	; (d63d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d638e:	681a      	ldr	r2, [r3, #0]
   d6390:	07d1      	lsls	r1, r2, #31
   d6392:	bf5c      	itt	pl
   d6394:	2201      	movpl	r2, #1
   d6396:	601a      	strpl	r2, [r3, #0]
   d6398:	4b10      	ldr	r3, [pc, #64]	; (d63dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d639a:	681a      	ldr	r2, [r3, #0]
   d639c:	07d2      	lsls	r2, r2, #31
   d639e:	bf5c      	itt	pl
   d63a0:	2201      	movpl	r2, #1
   d63a2:	601a      	strpl	r2, [r3, #0]
   d63a4:	4b0e      	ldr	r3, [pc, #56]	; (d63e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d63a6:	681a      	ldr	r2, [r3, #0]
   d63a8:	07d0      	lsls	r0, r2, #31
   d63aa:	bf5c      	itt	pl
   d63ac:	2201      	movpl	r2, #1
   d63ae:	601a      	strpl	r2, [r3, #0]
   d63b0:	4b0c      	ldr	r3, [pc, #48]	; (d63e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d63b2:	681a      	ldr	r2, [r3, #0]
   d63b4:	07d1      	lsls	r1, r2, #31
   d63b6:	bf5c      	itt	pl
   d63b8:	2201      	movpl	r2, #1
   d63ba:	601a      	strpl	r2, [r3, #0]
   d63bc:	4b0a      	ldr	r3, [pc, #40]	; (d63e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d63be:	681a      	ldr	r2, [r3, #0]
   d63c0:	07d2      	lsls	r2, r2, #31
   d63c2:	bf5c      	itt	pl
   d63c4:	2201      	movpl	r2, #1
   d63c6:	601a      	strpl	r2, [r3, #0]
   d63c8:	4770      	bx	lr
   d63ca:	bf00      	nop
   d63cc:	2003e76c 	.word	0x2003e76c
   d63d0:	2003e768 	.word	0x2003e768
   d63d4:	2003e764 	.word	0x2003e764
   d63d8:	2003e760 	.word	0x2003e760
   d63dc:	2003e75c 	.word	0x2003e75c
   d63e0:	2003e758 	.word	0x2003e758
   d63e4:	2003e754 	.word	0x2003e754
   d63e8:	2003e750 	.word	0x2003e750

000d63ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d63ec:	4b24      	ldr	r3, [pc, #144]	; (d6480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d63ee:	681a      	ldr	r2, [r3, #0]
   d63f0:	07d0      	lsls	r0, r2, #31
   d63f2:	bf5c      	itt	pl
   d63f4:	2201      	movpl	r2, #1
   d63f6:	601a      	strpl	r2, [r3, #0]
   d63f8:	4b22      	ldr	r3, [pc, #136]	; (d6484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d63fa:	681a      	ldr	r2, [r3, #0]
   d63fc:	07d1      	lsls	r1, r2, #31
   d63fe:	bf5c      	itt	pl
   d6400:	2201      	movpl	r2, #1
   d6402:	601a      	strpl	r2, [r3, #0]
   d6404:	4b20      	ldr	r3, [pc, #128]	; (d6488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6406:	681a      	ldr	r2, [r3, #0]
   d6408:	07d2      	lsls	r2, r2, #31
   d640a:	bf5c      	itt	pl
   d640c:	2201      	movpl	r2, #1
   d640e:	601a      	strpl	r2, [r3, #0]
   d6410:	4b1e      	ldr	r3, [pc, #120]	; (d648c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6412:	681a      	ldr	r2, [r3, #0]
   d6414:	07d0      	lsls	r0, r2, #31
   d6416:	bf5c      	itt	pl
   d6418:	2201      	movpl	r2, #1
   d641a:	601a      	strpl	r2, [r3, #0]
   d641c:	4b1c      	ldr	r3, [pc, #112]	; (d6490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d641e:	681a      	ldr	r2, [r3, #0]
   d6420:	07d1      	lsls	r1, r2, #31
   d6422:	bf5c      	itt	pl
   d6424:	2201      	movpl	r2, #1
   d6426:	601a      	strpl	r2, [r3, #0]
   d6428:	4b1a      	ldr	r3, [pc, #104]	; (d6494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d642a:	681a      	ldr	r2, [r3, #0]
   d642c:	07d2      	lsls	r2, r2, #31
   d642e:	bf5c      	itt	pl
   d6430:	2201      	movpl	r2, #1
   d6432:	601a      	strpl	r2, [r3, #0]
   d6434:	4b18      	ldr	r3, [pc, #96]	; (d6498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6436:	681a      	ldr	r2, [r3, #0]
   d6438:	07d0      	lsls	r0, r2, #31
   d643a:	bf5c      	itt	pl
   d643c:	2201      	movpl	r2, #1
   d643e:	601a      	strpl	r2, [r3, #0]
   d6440:	4b16      	ldr	r3, [pc, #88]	; (d649c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6442:	681a      	ldr	r2, [r3, #0]
   d6444:	07d1      	lsls	r1, r2, #31
   d6446:	bf5c      	itt	pl
   d6448:	2201      	movpl	r2, #1
   d644a:	601a      	strpl	r2, [r3, #0]
   d644c:	4b14      	ldr	r3, [pc, #80]	; (d64a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d644e:	681a      	ldr	r2, [r3, #0]
   d6450:	07d2      	lsls	r2, r2, #31
   d6452:	bf5c      	itt	pl
   d6454:	2201      	movpl	r2, #1
   d6456:	601a      	strpl	r2, [r3, #0]
   d6458:	4b12      	ldr	r3, [pc, #72]	; (d64a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d645a:	681a      	ldr	r2, [r3, #0]
   d645c:	07d0      	lsls	r0, r2, #31
   d645e:	bf5c      	itt	pl
   d6460:	2201      	movpl	r2, #1
   d6462:	601a      	strpl	r2, [r3, #0]
   d6464:	4b10      	ldr	r3, [pc, #64]	; (d64a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6466:	681a      	ldr	r2, [r3, #0]
   d6468:	07d1      	lsls	r1, r2, #31
   d646a:	bf5c      	itt	pl
   d646c:	2201      	movpl	r2, #1
   d646e:	601a      	strpl	r2, [r3, #0]
   d6470:	4b0e      	ldr	r3, [pc, #56]	; (d64ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6472:	681a      	ldr	r2, [r3, #0]
   d6474:	07d2      	lsls	r2, r2, #31
   d6476:	bf5c      	itt	pl
   d6478:	2201      	movpl	r2, #1
   d647a:	601a      	strpl	r2, [r3, #0]
   d647c:	4770      	bx	lr
   d647e:	bf00      	nop
   d6480:	2003e79c 	.word	0x2003e79c
   d6484:	2003e798 	.word	0x2003e798
   d6488:	2003e794 	.word	0x2003e794
   d648c:	2003e790 	.word	0x2003e790
   d6490:	2003e78c 	.word	0x2003e78c
   d6494:	2003e788 	.word	0x2003e788
   d6498:	2003e784 	.word	0x2003e784
   d649c:	2003e780 	.word	0x2003e780
   d64a0:	2003e77c 	.word	0x2003e77c
   d64a4:	2003e778 	.word	0x2003e778
   d64a8:	2003e774 	.word	0x2003e774
   d64ac:	2003e770 	.word	0x2003e770

000d64b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d64b0:	4b24      	ldr	r3, [pc, #144]	; (d6544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d64b2:	681a      	ldr	r2, [r3, #0]
   d64b4:	07d0      	lsls	r0, r2, #31
   d64b6:	bf5c      	itt	pl
   d64b8:	2201      	movpl	r2, #1
   d64ba:	601a      	strpl	r2, [r3, #0]
   d64bc:	4b22      	ldr	r3, [pc, #136]	; (d6548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d64be:	681a      	ldr	r2, [r3, #0]
   d64c0:	07d1      	lsls	r1, r2, #31
   d64c2:	bf5c      	itt	pl
   d64c4:	2201      	movpl	r2, #1
   d64c6:	601a      	strpl	r2, [r3, #0]
   d64c8:	4b20      	ldr	r3, [pc, #128]	; (d654c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d64ca:	681a      	ldr	r2, [r3, #0]
   d64cc:	07d2      	lsls	r2, r2, #31
   d64ce:	bf5c      	itt	pl
   d64d0:	2201      	movpl	r2, #1
   d64d2:	601a      	strpl	r2, [r3, #0]
   d64d4:	4b1e      	ldr	r3, [pc, #120]	; (d6550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d64d6:	681a      	ldr	r2, [r3, #0]
   d64d8:	07d0      	lsls	r0, r2, #31
   d64da:	bf5c      	itt	pl
   d64dc:	2201      	movpl	r2, #1
   d64de:	601a      	strpl	r2, [r3, #0]
   d64e0:	4b1c      	ldr	r3, [pc, #112]	; (d6554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d64e2:	681a      	ldr	r2, [r3, #0]
   d64e4:	07d1      	lsls	r1, r2, #31
   d64e6:	bf5c      	itt	pl
   d64e8:	2201      	movpl	r2, #1
   d64ea:	601a      	strpl	r2, [r3, #0]
   d64ec:	4b1a      	ldr	r3, [pc, #104]	; (d6558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d64ee:	681a      	ldr	r2, [r3, #0]
   d64f0:	07d2      	lsls	r2, r2, #31
   d64f2:	bf5c      	itt	pl
   d64f4:	2201      	movpl	r2, #1
   d64f6:	601a      	strpl	r2, [r3, #0]
   d64f8:	4b18      	ldr	r3, [pc, #96]	; (d655c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d64fa:	681a      	ldr	r2, [r3, #0]
   d64fc:	07d0      	lsls	r0, r2, #31
   d64fe:	bf5c      	itt	pl
   d6500:	2201      	movpl	r2, #1
   d6502:	601a      	strpl	r2, [r3, #0]
   d6504:	4b16      	ldr	r3, [pc, #88]	; (d6560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6506:	681a      	ldr	r2, [r3, #0]
   d6508:	07d1      	lsls	r1, r2, #31
   d650a:	bf5c      	itt	pl
   d650c:	2201      	movpl	r2, #1
   d650e:	601a      	strpl	r2, [r3, #0]
   d6510:	4b14      	ldr	r3, [pc, #80]	; (d6564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6512:	681a      	ldr	r2, [r3, #0]
   d6514:	07d2      	lsls	r2, r2, #31
   d6516:	bf5c      	itt	pl
   d6518:	2201      	movpl	r2, #1
   d651a:	601a      	strpl	r2, [r3, #0]
   d651c:	4b12      	ldr	r3, [pc, #72]	; (d6568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d651e:	681a      	ldr	r2, [r3, #0]
   d6520:	07d0      	lsls	r0, r2, #31
   d6522:	bf5c      	itt	pl
   d6524:	2201      	movpl	r2, #1
   d6526:	601a      	strpl	r2, [r3, #0]
   d6528:	4b10      	ldr	r3, [pc, #64]	; (d656c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d652a:	681a      	ldr	r2, [r3, #0]
   d652c:	07d1      	lsls	r1, r2, #31
   d652e:	bf5c      	itt	pl
   d6530:	2201      	movpl	r2, #1
   d6532:	601a      	strpl	r2, [r3, #0]
   d6534:	4b0e      	ldr	r3, [pc, #56]	; (d6570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6536:	681a      	ldr	r2, [r3, #0]
   d6538:	07d2      	lsls	r2, r2, #31
   d653a:	bf5c      	itt	pl
   d653c:	2201      	movpl	r2, #1
   d653e:	601a      	strpl	r2, [r3, #0]
   d6540:	4770      	bx	lr
   d6542:	bf00      	nop
   d6544:	2003e7cc 	.word	0x2003e7cc
   d6548:	2003e7c8 	.word	0x2003e7c8
   d654c:	2003e7c4 	.word	0x2003e7c4
   d6550:	2003e7c0 	.word	0x2003e7c0
   d6554:	2003e7bc 	.word	0x2003e7bc
   d6558:	2003e7b8 	.word	0x2003e7b8
   d655c:	2003e7b4 	.word	0x2003e7b4
   d6560:	2003e7b0 	.word	0x2003e7b0
   d6564:	2003e7ac 	.word	0x2003e7ac
   d6568:	2003e7a8 	.word	0x2003e7a8
   d656c:	2003e7a4 	.word	0x2003e7a4
   d6570:	2003e7a0 	.word	0x2003e7a0

000d6574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6574:	4b18      	ldr	r3, [pc, #96]	; (d65d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6576:	681a      	ldr	r2, [r3, #0]
   d6578:	07d1      	lsls	r1, r2, #31
   d657a:	bf5c      	itt	pl
   d657c:	2201      	movpl	r2, #1
   d657e:	601a      	strpl	r2, [r3, #0]
   d6580:	4b16      	ldr	r3, [pc, #88]	; (d65dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6582:	681a      	ldr	r2, [r3, #0]
   d6584:	07d2      	lsls	r2, r2, #31
   d6586:	bf5c      	itt	pl
   d6588:	2201      	movpl	r2, #1
   d658a:	601a      	strpl	r2, [r3, #0]
   d658c:	4b14      	ldr	r3, [pc, #80]	; (d65e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d658e:	681a      	ldr	r2, [r3, #0]
   d6590:	07d0      	lsls	r0, r2, #31
   d6592:	bf5c      	itt	pl
   d6594:	2201      	movpl	r2, #1
   d6596:	601a      	strpl	r2, [r3, #0]
   d6598:	4b12      	ldr	r3, [pc, #72]	; (d65e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d659a:	681a      	ldr	r2, [r3, #0]
   d659c:	07d1      	lsls	r1, r2, #31
   d659e:	bf5c      	itt	pl
   d65a0:	2201      	movpl	r2, #1
   d65a2:	601a      	strpl	r2, [r3, #0]
   d65a4:	4b10      	ldr	r3, [pc, #64]	; (d65e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d65a6:	681a      	ldr	r2, [r3, #0]
   d65a8:	07d2      	lsls	r2, r2, #31
   d65aa:	bf5c      	itt	pl
   d65ac:	2201      	movpl	r2, #1
   d65ae:	601a      	strpl	r2, [r3, #0]
   d65b0:	4b0e      	ldr	r3, [pc, #56]	; (d65ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d65b2:	681a      	ldr	r2, [r3, #0]
   d65b4:	07d0      	lsls	r0, r2, #31
   d65b6:	bf5c      	itt	pl
   d65b8:	2201      	movpl	r2, #1
   d65ba:	601a      	strpl	r2, [r3, #0]
   d65bc:	4b0c      	ldr	r3, [pc, #48]	; (d65f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d65be:	681a      	ldr	r2, [r3, #0]
   d65c0:	07d1      	lsls	r1, r2, #31
   d65c2:	bf5c      	itt	pl
   d65c4:	2201      	movpl	r2, #1
   d65c6:	601a      	strpl	r2, [r3, #0]
   d65c8:	4b0a      	ldr	r3, [pc, #40]	; (d65f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d65ca:	681a      	ldr	r2, [r3, #0]
   d65cc:	07d2      	lsls	r2, r2, #31
   d65ce:	bf5c      	itt	pl
   d65d0:	2201      	movpl	r2, #1
   d65d2:	601a      	strpl	r2, [r3, #0]
   d65d4:	4770      	bx	lr
   d65d6:	bf00      	nop
   d65d8:	2003e7ec 	.word	0x2003e7ec
   d65dc:	2003e7e8 	.word	0x2003e7e8
   d65e0:	2003e7e4 	.word	0x2003e7e4
   d65e4:	2003e7e0 	.word	0x2003e7e0
   d65e8:	2003e7dc 	.word	0x2003e7dc
   d65ec:	2003e7d8 	.word	0x2003e7d8
   d65f0:	2003e7d4 	.word	0x2003e7d4
   d65f4:	2003e7d0 	.word	0x2003e7d0

000d65f8 <__cxa_atexit>:
   d65f8:	b510      	push	{r4, lr}
   d65fa:	4c05      	ldr	r4, [pc, #20]	; (d6610 <__cxa_atexit+0x18>)
   d65fc:	4613      	mov	r3, r2
   d65fe:	b12c      	cbz	r4, d660c <__cxa_atexit+0x14>
   d6600:	460a      	mov	r2, r1
   d6602:	4601      	mov	r1, r0
   d6604:	2002      	movs	r0, #2
   d6606:	f3af 8000 	nop.w
   d660a:	bd10      	pop	{r4, pc}
   d660c:	4620      	mov	r0, r4
   d660e:	bd10      	pop	{r4, pc}
   d6610:	00000000 	.word	0x00000000

000d6614 <memcmp>:
   d6614:	b510      	push	{r4, lr}
   d6616:	3901      	subs	r1, #1
   d6618:	4402      	add	r2, r0
   d661a:	4290      	cmp	r0, r2
   d661c:	d007      	beq.n	d662e <memcmp+0x1a>
   d661e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6622:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6626:	42a3      	cmp	r3, r4
   d6628:	d0f7      	beq.n	d661a <memcmp+0x6>
   d662a:	1b18      	subs	r0, r3, r4
   d662c:	bd10      	pop	{r4, pc}
   d662e:	2000      	movs	r0, #0
   d6630:	bd10      	pop	{r4, pc}

000d6632 <memcpy>:
   d6632:	b510      	push	{r4, lr}
   d6634:	1e43      	subs	r3, r0, #1
   d6636:	440a      	add	r2, r1
   d6638:	4291      	cmp	r1, r2
   d663a:	d004      	beq.n	d6646 <memcpy+0x14>
   d663c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6640:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6644:	e7f8      	b.n	d6638 <memcpy+0x6>
   d6646:	bd10      	pop	{r4, pc}

000d6648 <memmove>:
   d6648:	4288      	cmp	r0, r1
   d664a:	b510      	push	{r4, lr}
   d664c:	eb01 0302 	add.w	r3, r1, r2
   d6650:	d801      	bhi.n	d6656 <memmove+0xe>
   d6652:	1e42      	subs	r2, r0, #1
   d6654:	e00b      	b.n	d666e <memmove+0x26>
   d6656:	4298      	cmp	r0, r3
   d6658:	d2fb      	bcs.n	d6652 <memmove+0xa>
   d665a:	1881      	adds	r1, r0, r2
   d665c:	1ad2      	subs	r2, r2, r3
   d665e:	42d3      	cmn	r3, r2
   d6660:	d004      	beq.n	d666c <memmove+0x24>
   d6662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6666:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d666a:	e7f8      	b.n	d665e <memmove+0x16>
   d666c:	bd10      	pop	{r4, pc}
   d666e:	4299      	cmp	r1, r3
   d6670:	d004      	beq.n	d667c <memmove+0x34>
   d6672:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6676:	f802 4f01 	strb.w	r4, [r2, #1]!
   d667a:	e7f8      	b.n	d666e <memmove+0x26>
   d667c:	bd10      	pop	{r4, pc}

000d667e <memset>:
   d667e:	4402      	add	r2, r0
   d6680:	4603      	mov	r3, r0
   d6682:	4293      	cmp	r3, r2
   d6684:	d002      	beq.n	d668c <memset+0xe>
   d6686:	f803 1b01 	strb.w	r1, [r3], #1
   d668a:	e7fa      	b.n	d6682 <memset+0x4>
   d668c:	4770      	bx	lr
	...

000d6690 <srand>:
   d6690:	b538      	push	{r3, r4, r5, lr}
   d6692:	4b12      	ldr	r3, [pc, #72]	; (d66dc <srand+0x4c>)
   d6694:	681c      	ldr	r4, [r3, #0]
   d6696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6698:	4605      	mov	r5, r0
   d669a:	b9d3      	cbnz	r3, d66d2 <srand+0x42>
   d669c:	2018      	movs	r0, #24
   d669e:	f7fe f8a9 	bl	d47f4 <malloc>
   d66a2:	f243 330e 	movw	r3, #13070	; 0x330e
   d66a6:	63a0      	str	r0, [r4, #56]	; 0x38
   d66a8:	8003      	strh	r3, [r0, #0]
   d66aa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d66ae:	8043      	strh	r3, [r0, #2]
   d66b0:	f241 2334 	movw	r3, #4660	; 0x1234
   d66b4:	8083      	strh	r3, [r0, #4]
   d66b6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d66ba:	80c3      	strh	r3, [r0, #6]
   d66bc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d66c0:	8103      	strh	r3, [r0, #8]
   d66c2:	2305      	movs	r3, #5
   d66c4:	8143      	strh	r3, [r0, #10]
   d66c6:	230b      	movs	r3, #11
   d66c8:	8183      	strh	r3, [r0, #12]
   d66ca:	2201      	movs	r2, #1
   d66cc:	2300      	movs	r3, #0
   d66ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d66d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d66d4:	2200      	movs	r2, #0
   d66d6:	611d      	str	r5, [r3, #16]
   d66d8:	615a      	str	r2, [r3, #20]
   d66da:	bd38      	pop	{r3, r4, r5, pc}
   d66dc:	2003e48c 	.word	0x2003e48c

000d66e0 <strlen>:
   d66e0:	4603      	mov	r3, r0
   d66e2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d66e6:	2a00      	cmp	r2, #0
   d66e8:	d1fb      	bne.n	d66e2 <strlen+0x2>
   d66ea:	1a18      	subs	r0, r3, r0
   d66ec:	3801      	subs	r0, #1
   d66ee:	4770      	bx	lr

000d66f0 <strnlen>:
   d66f0:	b510      	push	{r4, lr}
   d66f2:	4603      	mov	r3, r0
   d66f4:	4401      	add	r1, r0
   d66f6:	428b      	cmp	r3, r1
   d66f8:	d004      	beq.n	d6704 <strnlen+0x14>
   d66fa:	781a      	ldrb	r2, [r3, #0]
   d66fc:	1c5c      	adds	r4, r3, #1
   d66fe:	b10a      	cbz	r2, d6704 <strnlen+0x14>
   d6700:	4623      	mov	r3, r4
   d6702:	e7f8      	b.n	d66f6 <strnlen+0x6>
   d6704:	1a18      	subs	r0, r3, r0
   d6706:	bd10      	pop	{r4, pc}

000d6708 <dynalib_user>:
   d6708:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6718:	0000 0000 6552 6563 7669 6465 6420 7461     ....Received dat
   d6728:	2061 7266 6d6f 203a 3025 5832 253a 3230     a from: %02X:%02
   d6738:	3a58 3025 5832 253a 3230 3a58 3025 5832     X:%02X:%02X:%02X
   d6748:	253a 3230 3a58 6800 6a65 3600 3445 3030     :%02X:.hej.6E400
   d6758:	3030 2d31 3542 3341 462d 3933 2d33 3045     001-B5A3-F393-E0
   d6768:	3941 452d 3035 3245 4434 4343 3941 0045     A9-E50E24DCCA9E.
   d6778:	4536 3034 3030 3330 422d 4135 2d33 3346     6E400003-B5A3-F3
   d6788:	3339 452d 4130 2d39 3545 4530 3432 4344     93-E0A9-E50E24DC
   d6798:	4143 4539 3600 3445 3030 3030 2d32 3542     CA9E.6E400002-B5
   d67a8:	3341 462d 3933 2d33 3045 3941 452d 3035     A3-F393-E0A9-E50
   d67b8:	3245 4434 4343 3941 0045 7874 7200 0078     E24DCCA9E.tx.rx.

000d67c8 <_ZTVN5spark13EthernetClassE>:
	...
   d67d0:	4883 000d 4879 000d 486f 000d 4865 000d     .H..yH..oH..eH..
   d67e0:	4859 000d 484d 000d 4841 000d 4839 000d     YH..MH..AH..9H..
   d67f0:	482f 000d 4825 000d 6279 000d               /H..%H..yb..

000d67fc <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6804:	49b7 000d 49bd 000d 570d 000d 49e7 000d     .I...I...W...I..
   d6814:	49b9 000d                                   .I..

000d6818 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6820:	49b1 000d 49cb 000d 5819 000d 49eb 000d     .I...I...X...I..
   d6830:	49b3 000d                                   .I..

000d6834 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d683c:	49ab 000d 49d9 000d 51f9 000d 49ef 000d     .I...I...Q...I..
   d684c:	49ad 000d                                   .I..

000d6850 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d6850:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   d6860:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   d6870:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   d6880:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   d6890:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   d68a0:	7265 7369 6974 7363 002e 6550 7265 6420     eristics..Peer d
   d68b0:	7665 6369 2065 7369 6d20 7369 6973 676e     evice is missing
   d68c0:	0021 6146 6c69 6465 7420 206f 7061 6570     !.Failed to appe
   d68d0:	646e 7020 6565 2072 6543 746e 6172 206c     nd peer Central 
   d68e0:	6564 6976 6563 002e 6f43 6e6e 6365 6574     device..Connecte
   d68f0:	2064 7962 4320 6e65 7274 6c61 6420 7665     d by Central dev
   d6900:	6369 2e65 4400 7369 6f63 6e6e 6365 6574     ice..Disconnecte
   d6910:	2064 7962 7220 6d65 746f 2065 6564 6976     d by remote devi
   d6920:	6563 002e 6143 6e6e 746f 6120 6464 6e20     ce..Cannot add n
   d6930:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   d6940:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   d6950:	2073 6f63 6e6e 6365 6574 2e64 4600 6961     s connected..Fai
   d6960:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d6970:	6373 766f 7265 6465 6320 6168 6172 7463     scovered charact
   d6980:	7265 7369 6974 2e63 4600 6961 656c 2064     eristic..Failed 
   d6990:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   d69a0:	7265 6465 7320 7265 6976 6563 002e 6146     ered service..Fa
   d69b0:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   d69c0:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   d69d0:	6974 2e63 4400 7075 696c 6163 6574 2064     tic..Duplicated 
   d69e0:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   d69f0:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..

000d6a00 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d6a00:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   d6a10:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   d6a20:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   d6a30:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   d6a40:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   d6a50:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   d6a60:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   d6a70:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   d6a80:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   d6a90:	2500 0064 202c 2800 3a29 0020 5b20 6300     .%d., .(): . [.c
   d6aa0:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
   d6ab0:	2073 203d 0d00 000a 0066 6e6c 6600 006e     s = ....f.ln.fn.
   d6ac0:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   d6ad0:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   d6ae0:	6500 7272 726f 7000 6e61 6369 6100 6c6c     .error.panic.all
   d6af0:	5a00 2500 302b 6433 253a 3230 0075 5925     .Z.%+03d:%02u.%Y
   d6b00:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
   d6b10:	007a 7361 7463 6d69 0065 0000               z.asctime...

000d6b1c <_ZTV9IPAddress>:
	...
   d6b24:	5d05 000d 5cf5 000d 5cf7 000d               .]...\...\..

000d6b30 <_ZTV9USBSerial>:
	...
   d6b38:	5ddd 000d 5e2d 000d 5e3b 000d 5af1 000d     .]..-^..;^...Z..
   d6b48:	5e19 000d 5ddf 000d 5df5 000d 5e27 000d     .^...]...]..'^..
   d6b58:	5e0b 000d 5dd9 000d                         .^...]..

000d6b60 <_ZTV11USARTSerial>:
	...
   d6b68:	5ee9 000d 5f39 000d 5f47 000d 5af1 000d     .^..9_..G_...Z..
   d6b78:	5efd 000d 5f1f 000d 5f0b 000d 5f33 000d     .^..._..._..3_..
   d6b88:	5eeb 000d 5eef 000d                         .^...^..

000d6b90 <_ZTVN5spark9MeshClassE>:
	...
   d6b98:	6077 000d 606d 000d 6063 000d 6059 000d     w`..m`..c`..Y`..
   d6ba8:	604d 000d 6041 000d 6035 000d 602d 000d     M`..A`..5`..-`..
   d6bb8:	6023 000d 6019 000d 6279 000d               #`...`..yb..

000d6bc4 <_ZTVN5spark9WiFiClassE>:
	...
   d6bcc:	61f3 000d 61e9 000d 61df 000d 6195 000d     .a...a...a...a..
   d6bdc:	61d3 000d 61c7 000d 61bb 000d 61b3 000d     .a...a...a...a..
   d6bec:	61a9 000d 619f 000d 6279 000d               .a...a..yb..

000d6bf8 <_ZTVN5spark12NetworkClassE>:
	...
   d6c00:	6211 000d 621b 000d 6225 000d 622f 000d     .b...b..%b../b..
   d6c10:	6239 000d 6245 000d 6251 000d 625d 000d     9b..Eb..Qb..]b..
   d6c20:	6265 000d 626f 000d 6279 000d               eb..ob..yb..

000d6c2c <__sf_fake_stdin>:
	...

000d6c4c <__sf_fake_stdout>:
	...

000d6c6c <__sf_fake_stderr>:
	...
   d6c8c:	0043                                        C.

000d6c8e <link_const_variable_data_end>:
	...

000d6c90 <link_constructors_location>:
   d6c90:	000d4305 	.word	0x000d4305
   d6c94:	000d488d 	.word	0x000d488d
   d6c98:	000d48a1 	.word	0x000d48a1
   d6c9c:	000d5ac9 	.word	0x000d5ac9
   d6ca0:	000d5b85 	.word	0x000d5b85
   d6ca4:	000d5b95 	.word	0x000d5b95
   d6ca8:	000d5bc9 	.word	0x000d5bc9
   d6cac:	000d6145 	.word	0x000d6145
   d6cb0:	000d61fd 	.word	0x000d61fd
   d6cb4:	000d6345 	.word	0x000d6345
   d6cb8:	000d6369 	.word	0x000d6369
   d6cbc:	000d63ed 	.word	0x000d63ed
   d6cc0:	000d64b1 	.word	0x000d64b1
   d6cc4:	000d6575 	.word	0x000d6575

000d6cc8 <link_constructors_end>:
	...
